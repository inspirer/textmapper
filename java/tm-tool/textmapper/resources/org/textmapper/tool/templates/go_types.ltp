${template main-}
${if self->go_parser.eventBased() && opts.eventFields-}
${file self->astFilename()-}
${call unit-}
${end-}
${file self->factoryFilename()-}
${call factory-}
${end-}
${if opts.eventAST-}
${file self->treeFilename()-}
${call tree-}
${end-}
${file self->parseFilename()-}
${call parser-}
${end-}
${end-}
${end-}
${end}

${template unit-}
${call go.header-}
package ${self->package()}

${if !context.opts.eventAST && self->localWrappedType()-}
${call wrappedTypeTempl-}
${end-}
${call interfaces-}
${call types-}
${end}

${template factory-}
${call go.header-}
package ${self->package()}

func To${self->baseNode()}(n ${self->wrappedTypeRef()}) ${self->baseNode()} {
${if !context.opts.eventAST-}
	if n == nil {
		return nil
	}
${end-}
	switch n.Type() {
${foreach rangeType in syntax.rangeTypes.sort(it|it)-}
	case ${rangeType->go_listener.nodeTypeValueRef()}:
		return &${rangeType->astClassRef()}{n}
${end-}
${foreach extraType in opts.extraTypes-}
	case ${extraType->go_listener.stripArrows()->go_listener.nodeTypeValueRef()}:
		return &${extraType->go_listener.stripArrows()->astClassRef()}{n}
${end-}
${if tokens = opts.reportTokens
                   .collect(it|it->go_token.tokenNodeName()->go_listener.nodeTypeValueRef())->util.join(', '),
     tokens != '' -}
	case ${tokens}:
		return &Token{n}
${end-}
	case ${self->noType()}:
	  return nilInstance
${call customRules-}
	}
	panic("fmt".Errorf("ast: unknown node type %v", n.Type()))
	return nil
}
${end}


${template wrappedTypeTempl-}
type ${self->wrappedTypeRef()->go.declarationName()} interface {
	Type() ${self->go_listener.nodeTypeRef()}
	Offset() int
	Endoffset() int
	// Child returns the first child node that matches the selector.
	Child(sel ${self->go_filter.nodeSelectorTypeRef()}) Node
	Children(sel ${self->go_filter.nodeSelectorTypeRef()}) []Node
	// Next returns the first element among the following siblings that matches the selector.
	Next(sel ${self->go_filter.nodeSelectorTypeRef()}) Node
	// NextAll returns all following siblings of the node that match the selector.
	NextAll(sel ${self->go_filter.nodeSelectorTypeRef()}) []Node
	Text() string
	IsValid() bool
${call wrappedTypeExt-}
}

${end}

${template wrappedTypeExt-}
${end}


${template tree-}
${call go.header-}
package ${self->package()}

// Tree is a parse tree for some content.
type Tree struct {
	path    string
	content string
	lines   []int
	root    *Node
}

// NewTree creates a new Tree.
func newTree(path, content string) *Tree {
	return &Tree{path: path, content: content, lines: lineOffsets(content)}
}

// Path returns the location of the parsed content (if any).
func (t *Tree) Path() string {
	return t.path
}

// Root returns the root node of this tree.
func (t *Tree) Root() *Node {
	return t.root
}

// Text returns the parsed content.
func (t *Tree) Text() string {
	return t.content
}

// Node is an AST node.
type Node struct {
	t          ${self->go_listener.nodeTypeRef()}
	offset     int
	endoffset  int
	parent     *Node
	next       *Node
	firstChild *Node
	tree       *Tree
}

// IsValid helps to detect non-existing nodes.
func (n *Node) IsValid() bool {
	return n != nil
}

// Type returns
func (n *Node) Type() ${self->go_listener.nodeTypeRef()} {
	if n == nil {
		return "${self->go.package()}".NoType
	}
	return n.t
}

// Offset returns the start offset of the node.
func (n *Node) Offset() int {
	if n == nil {
		return 0
	}
	return n.offset
}

// Endoffset returns the end offset of the node.
func (n *Node) Endoffset() int {
	if n == nil {
		return 0
	}
	return n.endoffset
}

// LineColumn returns the start position of the nodes as 1-based line and column.
func (n *Node) LineColumn() (int, int) {
	if n == nil {
		return 1, 1
	}
	lines := n.tree.lines
	offset := n.offset
	line := "sort".Search(len(lines), func(i int) bool { return lines[i] > offset }) - 1
	return line + 1, offset - lines[line] + 1
}

// Child returns the first child node matching a given selector.
func (n *Node) Child(sel ${self->go_filter.nodeSelectorTypeRef()}) *Node {
	if n == nil {
		return nil
	}
	for c := n.firstChild; c != nil; c = c.next {
		if sel(c.t) {
			return c
		}
	}
	return nil
}

// Children returns all child nodes matching a given selector.
func (n *Node) Children(sel ${self->go_filter.nodeSelectorTypeRef()}) []*Node {
	if n == nil {
		return nil
	}
	var ret []*Node
	for c := n.firstChild; c != nil; c = c.next {
		if sel(c.t) {
			ret = append(ret, c)
		}
	}
	return ret
}

// Next returns the first node among right siblings of this node matching a given selector.
func (n *Node) Next(sel ${self->go_filter.nodeSelectorTypeRef()}) *Node {
	if n == nil {
		return nil
	}
	for c := n.next; c != nil; c = c.next {
		if sel(c.t) {
			return c
		}
	}
	return nil
}

// NextAll return all right siblings of this node matching a given selector.
func (n *Node) NextAll(sel ${self->go_filter.nodeSelectorTypeRef()}) []*Node {
	if n == nil {
		return nil
	}
	var ret []*Node
	for c := n.next; c != nil; c = c.next {
		if sel(c.t) {
			ret = append(ret, c)
		}
	}
	return ret
}

// Text returns the text of the node.
func (n *Node) Text() string {
	if n == nil {
		return ""
	}
	return n.tree.content[n.offset:n.endoffset]
}

func lineOffsets(str string) []int {
	var lines = make([]int, 1, 128)

	var off int
	for {
		i := "strings".IndexByte(str[off:], '\n')
		if i == -1 {
			break
		}
		off += i + 1
		lines = append(lines, off)
	}
	return lines
}
${end}

${template parser-}
${call go.header-}
package ${self->package()}

// Parse parses a given utf-8 content into an AST.
func Parse(${call go_parser.contextParam}path, content string${if self->go_parser.hasRecovering()}, eh "${self->go.package()}".ErrorHandler${end}) (*Tree, error) {
	var l "${self->go.package()}".Lexer
	l.Init(content)
	var p "${self->go.package()}".Parser
	b := newBuilder(path, content)
	p.Init(${if self->go_parser.hasRecovering()}eh, ${end}b.addNode)
	err := p.Parse${self->util.onlyOneUserInput() ? '' : util.toFirstUpper(syntax.input.select(it|it.requested).first().target.id)}(${call go_parser.contextArg}&l)
	if err != nil {
		return nil, err
	}
	return b.build()
}

type builder struct {
	tree  *Tree
	stack []*Node
	err   error
}

func newBuilder(path, content string) *builder {
	return &builder{
		tree:  newTree(path, content),
		stack: make([]*Node, 0, 512),
	}
}

func (b *builder) addNode(t ${self->go_listener.nodeTypeRef()}, offset, endoffset int) {
	start := len(b.stack)
	end := start
	for start > 0 && b.stack[start-1].offset >= offset {
		start--
		if b.stack[start].offset >= endoffset {
			end--
		}
	}
	out := &Node{
		tree:      b.tree,
		t:         t,
		offset:    offset,
		endoffset: endoffset,
	}
	if start < end {
		out.firstChild = b.stack[start]
		var prev *Node
		for i := end - 1; i >= start; i-- {
			n := b.stack[i]
			n.parent = out
			n.next = prev
			prev = n
		}
	}
	if end == len(b.stack) {
		b.stack = append(b.stack[:start], out)
	} else if start < end {
		b.stack[start] = out
		l := copy(b.stack[start+1:], b.stack[end:])
		b.stack = b.stack[:start+1+l]
	} else {
		b.stack = append(b.stack, nil)
		copy(b.stack[start+1:], b.stack[start:])
		b.stack[start] = out
	}
}
${if context.opts.fileNode == ''}
var errNumRoots = "errors".New("exactly one root node is expected")
${end}
func (b *builder) build() (*Tree, error) {
	if b.err != nil {
		return nil, b.err
	}
${if context.opts.fileNode != ''-}
	b.addNode(${self->go.package()->go.element(context.opts.fileNode)}, 0, len(b.tree.content))
${else-}
	if len(b.stack) != 1 {
		return nil, errNumRoots
	}
${end-}
	b.tree.root = b.stack[0]
	return b.tree, nil
}
${end}

${template wrappedTypeExt-}
${end}

${template interfaces-}
// Interfaces.

type ${self->baseNode()} interface {
	${self->underyingNodeMethod()}() ${self->wrappedTypeRef()}
}

${if opts.reportTokens.length > 0-}
type Token struct {
	${self->wrappedTypeRef()}
}

${end-}
type NilNode struct {}

var nilInstance = &NilNode{}

// All types implement ${self->baseNode()}.
${foreach rangeType in syntax.rangeTypes.sort(it|it)-}
func (n ${rangeType->astClassRef()->go.declarationName()}) ${self->underyingNodeMethod()}() ${self->wrappedTypeRef()} { return n.Node }
${end-}
${foreach extraType in opts.extraTypes-}
func (n ${extraType->go_listener.stripArrows()->astClassRef()->go.declarationName()}) ${self->underyingNodeMethod()}() ${self->wrappedTypeRef()} { return n.Node }
${end-}
${if opts.reportTokens.length > 0-}
func (n Token) ${self->underyingNodeMethod()}() ${self->wrappedTypeRef()} { return n.Node }
${end-}
func (NilNode) ${self->underyingNodeMethod()}() ${self->wrappedTypeRef()} { return nil }

${foreach cat in syntax.categories.sort(it|it).select(it|it != 'TokenSet')-}
type ${cat->astInterfaceRef()->go.declarationName()} interface {
	${self->underyingNodeMethod()}
	${cat->asInterfaceMethod()}()
}

// ${cat->asInterfaceMethod()}() ensures that only the following types can be
// assigned to ${cat->astInterfaceRef()->go.declarationName()}.
//
${foreach type in syntax.categoryTypes(cat)-}
func (${type->astClassRef()->go.declarationName()}) ${cat->asInterfaceMethod()}() {}
${end-}
func (NilNode) ${cat->asInterfaceMethod()}() {}

${end-}
${end}

${template types-}
// Types.

${foreach rangeType in syntax.rangeTypes.sort(it|it)-}
${call type(rangeType)-}
${end-}
${foreach extraType in opts.extraTypes-}
${call type(extraType->go_listener.stripArrows())-}
${end-}

${end}

${template type(rangeType)-}
type ${rangeType->astClassRef()->go.declarationName()} struct {
	${self->wrappedTypeRef()}
}
${foreach field in syntax.rangeFields(rangeType)}
func (n ${rangeType->astClassRef()->go.declarationName()}) ${field->asGetterName()}() ${call getterType(field)} {
${call getterImpl(field)-}
}
${end}
${end}


${cached query isOpt(field) =
  field.isNullable() && !field.isList() }

${cached query getterType(field) =
  (self->isOpt(field) ?
    '(' + self->getterInnerType(field) + ', bool)' :
    (field.isList() ? '[]' : '') + self->getterInnerType(field)
  )
}



${cached query isTokenType(name) =
    syntax.categoryTypes('TokenSet').contains(name) }

${cached query getterInnerType(field) =
  field.interfaceType ? field.interfaceType->astClassRef() :
  field.types.forAll(t|self->isTokenType(t)) ? 'Token' :
  field.types.length == 1
     ? field.types.first()->astClassRef()
     : self->baseNode() }

${cached query isOneType(field) = field.types.length == 1 }

${query fieldFilter(field) =
  field.interfaceType ? field.interfaceType->go_filter.nodeTypeFilterRef() :
  field.types.length == 1 ? field.types.first()->go_filter.nodeTypeFilterRef() :
  self->go_filter.oneOfRef() + '(' +
          field.types.collect(it|it->go_listener.nodeTypeValueRef())->util.join(', ') + ')'}

${query getFieldNode(field) =
  after = field.comesAfterField(),
  method = after ? (field.isList() ? 'NextAll' : 'Next') : (field.isList() ? 'Children' : 'Child'),
  (after ? self->getFieldNode(after) + '.' : 'n.') + method + '(' + self->fieldFilter(field) + ')' }

${template convertNode(field, node)-}
${if self->isOneType(field)-}
${self->getterInnerType(field)}{${node}}${else-}
To${self->baseNode()}(${node}).(${self->getterInnerType(field)})${end-}
${end}

${template getterImpl(field)-}
${if field.isList()-}
	nodes := ${self->getFieldNode(field)}
	var ret = make([]${self->getterInnerType(field)}, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ${self->convertNode(field, 'node')})
	}
	return ret
${else if self->isOpt(field)-}
	field := ${self->convertNode(field, self->getFieldNode(field))}
	return field, ${call getterIsValid-}
${else-}
	return ${self->convertNode(field, self->getFieldNode(field))}
${end-}
${end}

${template getterIsValid-}
${if self->isOneType(field)}field.IsValid()${else}field.${self->underyingNodeMethod()}() != nil${end-}
${end}


${query astFilename() = 'ast/ast.go'}
${query factoryFilename() = 'ast/factory.go'}
${query treeFilename() = 'ast/tree.go'}
${query parseFilename() = 'ast/parse.go'}
${query package() = self->go.package() + '/ast'}

${query localWrappedType() = self->package()->go.element(self->wrappedTypeRef()->go.declarationName()) == self->wrappedTypeRef()}
${query wrappedTypeRef() = (context.opts.eventAST ? '*' : '') +
                           self->package()->go.element('Node')}
${query noType() = 'NoType'->go_listener.nodeTypeValueRef()}
${query baseNode() = util.toCamelCase(opts.lang, true) + 'Node'}

${query asInterfaceMethod() = util.toFirstLower(self->go_listener.asRangeTypeName()) + 'Node' }

${query asGetterName() = util.toCamelCase(self.name, true)->go.escapeGoReserved()}

${query astClassRef() = self->package()->go.element(self->go_listener.asRangeTypeName())}
${query astInterfaceRef() = self->package()->go.element(self->go_listener.asRangeTypeName())}

${template customRules}${end}

${query underyingNodeMethod() = self->baseNode()}
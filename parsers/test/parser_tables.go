// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"

	"github.com/inspirer/textmapper/parsers/test/token"
)

var tmNonterminals = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"lookahead_FooLookahead",
	"lookahead_notFooLookahead",
	"setof_not_EOI_or_DOT_or_RBRACE",
	"setof_not_EOI_or_DOT_or_RBRACE_optlist",
	"FooLookahead",
	"setof_foo_la",
	"setof_foo_la_list",
	"empty1",
	"foo_la",
	"foo_nonterm",
	"foo_nonterm_A",
	"QualifiedName",
	"Decl1",
	"Decl2",
	"If",
	"expr",
	"customPlus",
	"primaryExpr",
	"primaryExpr_WithoutAs",
	"QualifiedNameopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Type(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmAction = []int32{
	-1, -1, -1, -3, 11, -1, -1, -27, -51, -1, -1, -55, 1, 3, 4, 82, -1, -1, 17,
	62, -75, -1, -81, -1, -1, -1, 10, -1, -1, 0, -1, 12, -1, -1, -1, -1, 78, -1,
	-105, 21, -1, -1, -1, 8, -1, -1, 9, -1, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 14, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, 15, 16, 80, -1, -1, -1, -129,
	-1, -1, 86, 87, -1, 81, -137, 6, -1, 7, 64, 65, 66, 67, 68, 69, 71, -1, -161,
	79, -1, -1, 19, -1, 72, -1, -1, -1, 5, 63, 70, -167, -173, -1, 18, 85, -179,
	84, -1, -185, -1, 20, -1, -1, -2, -2, -2,
}

var tmLalr = []int32{
	19, -1, 0, 13, 6, 13, 7, 13, 8, 13, 9, 13, 10, 13, 11, 13, 13, 13, 15, 13,
	16, 13, -1, -2, 24, -1, 0, 81, 6, 81, 7, 81, 8, 81, 9, 81, 10, 81, 11, 81,
	13, 81, 15, 81, 16, 81, -1, -2, 17, 94, -1, -2, 6, -1, 7, -1, 8, -1, 9, -1,
	10, -1, 11, -1, 13, -1, 15, -1, 0, 2, -1, -2, 6, -1, 18, 72, -1, -2, 4, -1,
	0, 93, 6, 93, 7, 93, 8, 93, 9, 93, 10, 93, 11, 93, 13, 93, 15, 93, 16, 93,
	-1, -2, 21, -1, 0, 92, 6, 92, 7, 92, 8, 92, 9, 92, 10, 92, 11, 92, 13, 92,
	15, 92, 16, 92, -1, -2, 18, 90, 27, 90, 12, 91, -1, -2, 14, -1, 0, 83, 6, 83,
	7, 83, 8, 83, 9, 83, 10, 83, 11, 83, 13, 83, 15, 83, 16, 83, -1, -2, 27, -1,
	18, 75, -1, -2, 27, -1, 18, 76, -1, -2, 27, -1, 18, 77, -1, -2, 27, -1, 18,
	89, -1, -2, 27, 88, 18, 88, -1, -2,
}

var tmGoto = []int32{
	0, 4, 6, 8, 10, 18, 20, 68, 86, 104, 124, 146, 164, 172, 194, 198, 218, 232,
	246, 264, 268, 272, 286, 288, 290, 294, 300, 302, 324, 344, 346, 354, 356,
	358, 360, 362, 364, 366, 368, 370, 372, 380, 382, 398, 400, 402, 404, 406,
	408, 412, 414, 418, 418, 420, 422, 426, 444, 464, 484, 498, 512, 530, 548,
	550,
}

var tmFromTo = []int16{
	137, 140, 138, 141, 32, 48, 32, 49, 32, 50, 21, 36, 22, 36, 32, 51, 91, 114,
	32, 52, 0, 3, 5, 18, 10, 3, 11, 3, 16, 30, 20, 33, 27, 3, 28, 3, 32, 53, 40,
	92, 41, 94, 44, 3, 45, 3, 47, 105, 87, 94, 95, 94, 103, 3, 112, 105, 115, 94,
	116, 94, 120, 94, 121, 94, 128, 94, 133, 94, 0, 4, 10, 4, 11, 4, 27, 4, 28,
	4, 32, 54, 44, 4, 45, 4, 103, 4, 0, 5, 10, 5, 11, 5, 27, 5, 28, 5, 32, 55,
	44, 5, 45, 5, 103, 5, 0, 6, 1, 6, 10, 6, 11, 6, 27, 6, 28, 6, 32, 56, 44, 6,
	45, 6, 103, 6, 0, 7, 10, 7, 11, 7, 27, 7, 28, 7, 32, 57, 42, 100, 44, 7, 45,
	7, 103, 7, 122, 100, 0, 8, 10, 8, 11, 8, 27, 8, 28, 8, 32, 58, 44, 8, 45, 8,
	103, 8, 32, 59, 47, 106, 99, 121, 112, 106, 0, 9, 10, 9, 11, 9, 27, 9, 28, 9,
	32, 60, 42, 9, 44, 9, 45, 9, 103, 9, 122, 9, 32, 61, 101, 122, 0, 10, 5, 19,
	10, 10, 11, 10, 27, 10, 28, 10, 32, 62, 44, 10, 45, 10, 103, 10, 10, 26, 27,
	43, 28, 46, 32, 63, 44, 102, 45, 104, 103, 123, 2, 16, 5, 20, 6, 21, 9, 25,
	23, 40, 24, 41, 32, 64, 25, 42, 32, 65, 34, 88, 35, 89, 37, 90, 93, 117, 96,
	119, 112, 124, 135, 136, 3, 17, 32, 66, 17, 31, 32, 67, 30, 47, 33, 87, 37,
	91, 38, 91, 47, 107, 92, 115, 112, 107, 32, 68, 32, 69, 7, 22, 32, 70, 10,
	27, 27, 44, 32, 71, 32, 72, 32, 73, 47, 108, 96, 120, 112, 108, 113, 120,
	118, 128, 126, 133, 127, 120, 131, 120, 134, 120, 135, 120, 32, 74, 41, 95,
	47, 109, 87, 95, 112, 109, 115, 95, 116, 95, 121, 95, 128, 95, 133, 95, 32,
	75, 32, 76, 47, 110, 92, 116, 112, 110, 32, 77, 32, 78, 32, 79, 32, 80, 32,
	81, 32, 82, 32, 83, 32, 84, 32, 85, 0, 11, 10, 28, 27, 45, 44, 103, 0, 137,
	0, 12, 10, 12, 11, 29, 27, 12, 28, 29, 44, 12, 45, 29, 103, 29, 8, 23, 8, 24,
	32, 86, 19, 32, 2, 139, 47, 111, 112, 125, 47, 112, 20, 34, 119, 129, 20, 35,
	40, 93, 21, 37, 22, 38, 0, 13, 1, 138, 10, 13, 11, 13, 27, 13, 28, 13, 44,
	13, 45, 13, 103, 13, 0, 14, 10, 14, 11, 14, 27, 14, 28, 14, 42, 101, 44, 14,
	45, 14, 103, 14, 122, 132, 0, 15, 10, 15, 11, 15, 27, 15, 28, 15, 42, 15, 44,
	15, 45, 15, 103, 15, 122, 15, 41, 96, 87, 113, 115, 126, 116, 127, 121, 131,
	128, 134, 133, 135, 41, 97, 87, 97, 115, 97, 116, 97, 121, 97, 128, 97, 133,
	97, 41, 98, 87, 98, 95, 118, 115, 98, 116, 98, 120, 130, 121, 98, 128, 98,
	133, 98, 41, 99, 87, 99, 95, 99, 115, 99, 116, 99, 120, 99, 121, 99, 128, 99,
	133, 99, 22, 39,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 1, 3, 1, 4, 4, 4, 2, 6, 5, 9, 3, 0, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 5, 1, 1, 1, 1, 1, 1, 2, 1, 0, 3, 3, 3, 3, 3,
	1, 3, 4, 1, 1, 4, 6, 3, 1, 1, 4, 3, 1, 1, 1, 0, 0,
}

var tmRuleSymbol = []int32{
	40, 40, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 43, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 46, 46, 47, 48, 48, 48, 48, 48, 48, 49, 49, 50, 51, 51, 52,
	53, 53, 54, 54, 55, 56, 56, 57, 57, 58, 58, 58, 59, 60, 60, 61, 62, 62, 44,
}

var tmRuleType = [...]uint32{
	0,                  // Declaration_list : Declaration_list Declaration
	0,                  // Declaration_list : Declaration
	uint32(Test),       // Test : Declaration_list
	0,                  // Declaration : Decl1
	0,                  // Declaration : Decl2
	uint32(Block),      // Declaration : '{' '-' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '-' '}'
	uint32(Block),      // Declaration : '{' '-' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '-' '}'
	uint32(Block),      // Declaration : '{' Declaration_list '}'
	uint32(Block),      // Declaration : '{' '}'
	uint32(LastInt),    // Declaration : lastInt
	uint32(Int),        // Declaration : IntegerConstant '[' ']'
	uint32(Int),        // Declaration : IntegerConstant
	uint32(TestClause), // Declaration : 'test' '{' setof_not_EOI_or_DOT_or_RBRACE_optlist '}'
	0,                  // Declaration : 'test' '(' empty1 ')'
	0,                  // Declaration : 'test' '(' foo_nonterm ')'
	uint32(TestIntClause) + uint32(InTest|InFoo)<<16, // Declaration : 'test' IntegerConstant
	uint32(EvalEmpty1),  // Declaration : 'eval' lookahead_notFooLookahead '(' expr ')' empty1
	uint32(EvalFoo),     // Declaration : 'eval' lookahead_FooLookahead '(' foo_nonterm_A ')'
	uint32(EvalFoo2),    // Declaration : 'eval' lookahead_FooLookahead '(' IntegerConstant '.' expr '+' .greedy expr ')'
	uint32(DeclOptQual), // Declaration : 'decl2' ':' QualifiedNameopt
	0,                   // lookahead_FooLookahead :
	0,                   // lookahead_notFooLookahead :
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : invalid_token
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : WhiteSpace
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : SingleLineComment
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : Identifier
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : Identifier2
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : IntegerConstant
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : lastInt
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'test'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'decl1'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'decl2'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'eval'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'as'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'if'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'else'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '{'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '('
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ')'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '['
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ']'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '...'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ','
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : ':'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '-'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '->'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '+'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '\\'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '_'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'foo_'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'f_a'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : multiline
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : dquote
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : '\''
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : SharpAtID
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : 'Zfoo'
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : backtrackingToken
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : error
	0,                   // setof_not_EOI_or_DOT_or_RBRACE : MultiLineComment
	0,                   // setof_not_EOI_or_DOT_or_RBRACE_optlist : setof_not_EOI_or_DOT_or_RBRACE_optlist setof_not_EOI_or_DOT_or_RBRACE
	0,                   // setof_not_EOI_or_DOT_or_RBRACE_optlist :
	0,                   // FooLookahead : '(' IntegerConstant '.' setof_foo_la_list ')'
	0,                   // setof_foo_la : IntegerConstant
	0,                   // setof_foo_la : 'as'
	0,                   // setof_foo_la : '.'
	0,                   // setof_foo_la : '+'
	0,                   // setof_foo_la : '\\'
	0,                   // setof_foo_la : 'foo_'
	0,                   // setof_foo_la_list : setof_foo_la_list setof_foo_la
	0,                   // setof_foo_la_list : setof_foo_la
	0,                   // empty1 :
	0,                   // foo_la : IntegerConstant '.' expr
	0,                   // foo_la : IntegerConstant 'foo_' expr
	0,                   // foo_nonterm : IntegerConstant '.' expr
	0,                   // foo_nonterm_A : IntegerConstant '.' expr
	0,                   // foo_nonterm_A : IntegerConstant 'foo_' expr
	0,                   // QualifiedName : Identifier
	0,                   // QualifiedName : QualifiedName '.' Identifier
	uint32(Decl1),       // Decl1 : 'decl1' '(' QualifiedName ')'
	uint32(Decl2),       // Decl2 : 'decl2'
	0,                   // Decl2 : If
	uint32(If),          // If : 'if' '(' ')' Decl2
	uint32(If),          // If : 'if' '(' ')' Decl2 'else' Decl2
	uint32(PlusExpr),    // expr : expr '+' primaryExpr
	0,                   // expr : customPlus
	0,                   // expr : primaryExpr
	0,                   // customPlus : '\\' primaryExpr '+' expr
	uint32(AsExpr),      // primaryExpr : primaryExpr_WithoutAs 'as' expr
	uint32(IntExpr),     // primaryExpr : IntegerConstant
	uint32(IntExpr),     // primaryExpr_WithoutAs : IntegerConstant
	0,                   // QualifiedNameopt : QualifiedName
	0,                   // QualifiedNameopt :
}

// set(follow ERROR) =
var afterErr = []token.Type{}

// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

type NodeType uint16

type NodeFlags uint16

type Listener func(t NodeType, flags NodeFlags, offset, endoffset int)

const (
	NoType NodeType = iota
	AsExpr          // left=Expr right=Expr
	Block           // Negation? (Declaration)*
	Decl1           // (Identifier)+
	Decl2
	DeclOptQual // (Identifier)*
	Empty1
	EvalEmpty1 // Expr
	EvalFoo    // Expr
	EvalFoo2   // a=Expr b=Expr
	Icon
	If // then=Decl2Interface else=Decl2Interface?
	Int
	IntExpr
	LastInt
	Negation
	PlusExpr // left=Expr right=Expr
	Test     // (Declaration)+
	TestClause
	TestIntClause // Icon
	MultiLineComment
	SingleLineComment
	InvalidToken
	Identifier
	Int7
	Int9
	NodeTypeMax
)

var nodeTypeStr = [...]string{
	"NONE",
	"AsExpr",
	"Block",
	"Decl1",
	"Decl2",
	"DeclOptQual",
	"Empty1",
	"EvalEmpty1",
	"EvalFoo",
	"EvalFoo2",
	"Icon",
	"If",
	"Int",
	"IntExpr",
	"LastInt",
	"Negation",
	"PlusExpr",
	"Test",
	"TestClause",
	"TestIntClause",
	"MultiLineComment",
	"SingleLineComment",
	"InvalidToken",
	"Identifier",
	"Int7",
	"Int9",
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}

var Decl2Interface = []NodeType{
	Decl2,
	If,
}

var Declaration = []NodeType{
	Block,
	Decl1,
	Decl2,
	DeclOptQual,
	Empty1,
	EvalEmpty1,
	EvalFoo,
	EvalFoo2,
	If,
	Int,
	LastInt,
	TestClause,
	TestIntClause,
}

var Expr = []NodeType{
	AsExpr,
	Int9,
	IntExpr,
	PlusExpr,
}

var TokenSet = []NodeType{
	Identifier,
}

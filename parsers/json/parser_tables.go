// generated by Textmapper; DO NOT EDIT

package json

import (
	"fmt"

	"github.com/inspirer/textmapper/parsers/json/token"
)

var tmNonterminals = [...]string{
	"JSONText",
	"JSONValue",
	"JSONValue_A",
	"EmptyObject",
	"lookahead_EmptyObject",
	"JSONObject",
	"lookahead_notEmptyObject",
	"JSONMember",
	"JSONMemberList",
	"JSONArray",
	"JSONElementList",
	"JSONElementListopt",
}

func symbolName(sym int32) string {
	if sym == noToken {
		return "<no-token>"
	}
	if sym < int32(token.NumTokens) {
		return token.Type(sym).String()
	}
	if i := int(sym) - int(token.NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmAction = []int32{
	-3, 20, -21, 17, 18, 10, 11, 12, 13, 0, 15, -1, 14, -1, 16, 28, -41, -1, -1,
	-1, -47, 27, 19, 22, -1, 25, -1, 29, -65, 21, -1, 8, 9, 1, 2, 3, 4, 24, 6, 5,
	7, 26, -1, -2, -2,
}

var tmLalr = []int32{
	4, -1, 10, -1, 11, -1, 13, -1, 14, -1, 15, -1, 16, -1, 2, 32, -1, -2, 4, -1,
	10, -1, 11, -1, 13, -1, 14, -1, 15, -1, 16, -1, 2, 32, 5, 31, -1, -2, 7, -1,
	5, 30, -1, -2, 4, -1, 10, -1, 11, -1, 13, -1, 14, -1, 15, -1, 16, -1, 2, 32,
	-1, -2, 4, -1, 10, -1, 11, -1, 13, -1, 14, -1, 15, -1, 17, -1, 2, 32, -1, -2,
}

var tmGoto = []int32{
	0, 2, 2, 6, 12, 20, 22, 24, 28, 28, 28, 40, 48, 48, 56, 64, 72, 78, 80, 80,
	82, 84, 90, 100, 110, 118, 126, 130, 132, 140, 142, 144,
}

var tmFromTo = []int8{
	42, 44, 11, 18, 13, 19, 18, 22, 19, 23, 26, 29, 0, 2, 2, 2, 20, 2, 28, 2, 17,
	21, 24, 28, 16, 20, 26, 30, 0, 3, 2, 3, 19, 24, 20, 3, 28, 31, 30, 24, 0, 4,
	2, 4, 20, 4, 28, 32, 0, 5, 2, 5, 20, 5, 28, 33, 0, 6, 2, 6, 20, 6, 28, 34, 0,
	7, 2, 7, 20, 7, 28, 35, 0, 8, 2, 8, 20, 8, 28, 36, 0, 42, 28, 37, 0, 9, 2,
	15, 20, 27, 0, 10, 1, 43, 2, 10, 20, 10, 28, 38, 0, 11, 1, 11, 2, 11, 20, 11,
	28, 11, 0, 12, 2, 12, 20, 12, 28, 39, 0, 13, 2, 13, 20, 13, 28, 13, 19, 25,
	30, 41, 19, 26, 0, 14, 2, 14, 20, 14, 28, 40, 2, 16, 2, 17,
}

var tmRuleLen = []int8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 4, 3, 0, 3, 1,
	3, 3, 1, 3, 1, 0, 0,
}

var tmRuleSymbol = []int32{
	19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 29, 30, 30, 25,
}

var tmRuleType = [...]NodeType{
	JSONText,    // JSONText : JSONValue_A
	JSONValue,   // JSONValue : 'null'
	JSONValue,   // JSONValue : 'true'
	JSONValue,   // JSONValue : 'false'
	JSONValue,   // JSONValue : 'B'
	JSONValue,   // JSONValue : JSONObject
	JSONValue,   // JSONValue : EmptyObject
	JSONValue,   // JSONValue : JSONArray
	JSONValue,   // JSONValue : JSONString
	JSONValue,   // JSONValue : JSONNumber
	JSONValue,   // JSONValue_A : 'null'
	JSONValue,   // JSONValue_A : 'true'
	JSONValue,   // JSONValue_A : 'false'
	JSONValue,   // JSONValue_A : 'A'
	JSONValue,   // JSONValue_A : JSONObject
	JSONValue,   // JSONValue_A : EmptyObject
	JSONValue,   // JSONValue_A : JSONArray
	JSONValue,   // JSONValue_A : JSONString
	JSONValue,   // JSONValue_A : JSONNumber
	EmptyObject, // EmptyObject : lookahead_EmptyObject '{' '}'
	0,           // lookahead_EmptyObject :
	JSONObject,  // JSONObject : lookahead_notEmptyObject '{' JSONMemberList '}'
	JSONObject,  // JSONObject : lookahead_notEmptyObject '{' '}'
	0,           // lookahead_notEmptyObject :
	JSONMember,  // JSONMember : JSONString ':' JSONValue
	0,           // JSONMemberList : JSONMember
	0,           // JSONMemberList : JSONMemberList ',' JSONMember
	JSONArray,   // JSONArray : '[' JSONElementListopt ']'
	0,           // JSONElementList : JSONValue_A
	0,           // JSONElementList : JSONElementList ',' JSONValue_A
	0,           // JSONElementListopt : JSONElementList
	0,           // JSONElementListopt :
}

// set(first JSONValue_A) = LBRACE, LBRACK, JSONSTRING, JSONNUMBER, NULL, TRUE, FALSE, CHAR_A
var Literals = []token.Type{
	2, 4, 10, 11, 13, 14, 15, 16,
}

// set(follow ERROR) =
var afterErr = []token.Type{}

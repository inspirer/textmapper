{{- define "flushPending" -}}
{{ if .ReportTokens true -}}
	if len(p.pending) > 0 {
		for _, tok := range p.pending {
			p.reportIgnoredToken({{if $.Options.Cancellable}}ctx, {{end}}tok)
		}
		p.pending = p.pending[:0]
	}
{{ end -}}
{{end}}

{{- define "customReportNext"}}{{end}}

{{- define "reportConsumedNext" -}}
{{ if .ReportTokens false -}}
			switch {{template "tokenType" .}}(p.next.symbol) {
{{ range .Lexer.MappedTokens -}}
{{ $sym := index $.Syms .Token -}}
{{ if not (or $sym.Space (eq $sym.Name "invalid_token")) -}}
	case {{template "tokenPkg" $}}{{$sym.ID}}:
		p.listener({{template "nodeTypePkg" $}}{{node_id .Name}}, {{if $.Parser.UsesFlags}}{{range $index, $flag := .Flags}}{{if ne $index 0}} | {{end}}{{template "nodeTypePkg" $}}{{$flag}}{{else}}0{{end}}, {{end}}p.next.offset, p.next.endoffset)
{{end -}}
{{end -}}
{{template "customReportNext" . -}}
			}
{{else -}}
{{template "customReportNext" . -}}
{{end -}}
{{end}}


{{- template "header" . -}}
package {{short_pkg .Options.Package}}

{{- if .Parser.IsRecovering }}
{{- block "errorHandler" .}}

// ErrorHandler is called every time a parser is unable to process some part of the input.
// This handler can return false to abort the parser.
type ErrorHandler func(err SyntaxError) bool

// StopOnFirstError is an error handler that forces the parser to stop on and return the first
// error.
func StopOnFirstError(_ SyntaxError) bool { return false }
{{- end }}
{{- end }}

{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
{{ if .Options.IsEnabled "Parser" -}}
// Parser is a table-driven LALR parser for {{.Name}}.
type Parser struct {
{{- if .Parser.IsRecovering }}
	eh ErrorHandler
{{- end}}
{{- if .Parser.Types }}
	listener Listener
{{- end}}

	next       symbol
{{- if .Parser.IsRecovering }}
	endState   int{{$stateType}}
	recovering int
{{- end}}

{{- if .ReportTokens true }}

	// Tokens to be reported with the next shift. Only non-empty when next.symbol != noToken.
	pending []symbol
{{- end }}
{{ block "sharedParserVars" .}}{{end -}}
{{ block "parserVars" .}}{{end -}}
}

{{ end -}}
{{ block "syntaxError" . -}}
type SyntaxError struct {
{{- if .Options.TokenLine }}
	Line      int
{{- end }}
	Offset    int
	Endoffset int
}

func (e SyntaxError) Error() string {
{{- if .Options.TokenLine }}
	return "fmt".Sprintf("syntax error at line %v", e.Line)
{{- else}}
	return "syntax error"
{{- end }}
}

{{ end -}}

{{ if .Options.IsEnabled "symbol" -}}
type symbol struct {
	symbol    int32
	offset    int
	endoffset int
}

{{ end -}}
{{ if .Options.IsEnabled "stackEntry" -}}
type stackEntry struct {
	sym   symbol
	state int{{$stateType}}
{{- if .Parser.HasAssocValues }}
	value interface{}
{{- end}}
}

{{ end -}}
{{ if .Options.IsEnabled "ParserInit" -}}
func (p *Parser) Init({{if .Parser.IsRecovering }}eh ErrorHandler{{end}}{{if .Parser.Types }}{{if .Parser.IsRecovering }}, {{end}}l Listener{{end}}) {
{{- if .Parser.IsRecovering }}
	p.eh = eh
{{- end}}
{{- if .Parser.Types }}
	p.listener = l
{{- end}}
{{- if .ReportTokens true }}
	if cap(p.pending) < startTokenBufferSize {
		p.pending = make([]symbol, 0, startTokenBufferSize)
	}
{{- end}}
{{ block "initSharedParserVars" .}}{{end -}}
{{ block "initParserVars" .}}{{end -}}
}

{{ end -}}
const (
	startStackSize = 256
{{- if .ReportTokens true }}
	startTokenBufferSize = 16
{{- end}}
	noToken        = int32({{template "tokenPkg" .}}UNAVAILABLE)
	eoiToken       = int32({{template "tokenPkg" .}}EOI)
	debugSyntax    = {{ .Options.DebugParser }}
)

{{ range $index, $inp := .Parser.Inputs -}}
{{ if $inp.Synthetic }}{{continue}}{{end -}}
{{ $nt := index $.Parser.Nonterms $inp.Nonterm -}}
func (p *Parser) Parse{{if $.Parser.HasMultipleUserInputs}}{{$.NontermID $inp.Nonterm}}{{end}}({{if $.Options.Cancellable}}ctx "context".Context, {{end}}lexer *Lexer) {{if eq $nt.Type ""}}error{{else}}({{$nt.Type}}, error){{end}} {
{{- if $.Parser.HasInputAssocValues}}
	{{if ne $nt.Type ""}}v{{else}}_{{end}}, err := p.parse({{if $.Options.Cancellable}}ctx, {{end}}{{$index}}, {{index $.Parser.Tables.FinalStates $index}}, lexer)
{{- if ne $nt.Type ""}}
	val, _ := v.({{$nt.Type}})
	return val, err
{{- else}}
	return err
{{- end}}
{{- else}}
	return p.parse({{if $.Options.Cancellable}}ctx, {{end}}{{$index}}, {{index $.Parser.Tables.FinalStates $index}}, lexer)
{{- end}}
}

{{end -}}
{{ block "session" . -}}
{{ if and .NeedsSession (.Options.IsEnabled "session") -}}
type session struct {
{{- if $.Options.Cancellable}}
	shiftCounter int32
{{- end }}
{{- if .Options.RecursiveLookaheads }}
	cache map[uint64]bool
{{- end }}
}

{{- end}}
{{- end}}
{{ block "parseFunc" . -}}
{{ $stateType := bits_per_element .Parser.Tables.FromTo -}}
{{ if .Options.IsEnabled "parse" -}}
func (p *Parser) parse({{if $.Options.Cancellable}}ctx "context".Context, {{end}}start, end int{{$stateType}}, lexer *Lexer) {{if .Parser.HasInputAssocValues}}(interface{}, error){{else}}error{{end}} { 
{{- if .ReportTokens true }}
	p.pending = p.pending[:0]
{{- end}}
{{- if .NeedsSession}}
	var s session
{{- if .Options.RecursiveLookaheads }}
	s.cache = make(map[uint64]bool)
{{- end}}
{{- else if .Options.Cancellable }}
	var shiftCounter int
{{- end}}
	state := start
{{- if .Parser.IsRecovering }}
	var lastErr SyntaxError
	p.recovering = 0
{{- end}}

	var alloc [startStackSize]stackEntry
	stack := append(alloc[:0], stackEntry{state: state})
{{- if .Parser.IsRecovering }}
	p.endState = end
{{- end}}
	p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)

	for state != end {
		action := tmAction[state]
{{- if .Parser.Tables.Optimized}}
		if action > tmActionBase {
			// Lookahead is needed.
			if p.next.symbol == noToken {
				p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
			}
			pos := action + p.next.symbol
			if pos >= 0 && pos < tmTableLen && int32(tmCheck[pos]) == p.next.symbol {
				action = int32(tmTable[pos])
			} else {
				action = tmDefAct[state]
			}
		} else {
			action = tmDefAct[state]
		}
{{- else if .Parser.Tables.Lalr}}
		if action < -2 {
			// Lookahead is needed.
			if p.next.symbol == noToken {
				p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
			}
			action = lalr(action, p.next.symbol)
		}
{{- end}}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var entry stackEntry
			entry.sym.symbol = tmRuleSymbol[rule]
			rhs := stack[len(stack)-ln:]
			stack = stack[:len(stack)-ln]
			if ln == 0 {
				if p.next.symbol == noToken {
					p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
				}
				entry.sym.offset, entry.sym.endoffset = p.next.offset, p.next.offset
			} else {
				entry.sym.offset = rhs[0].sym.offset
				entry.sym.endoffset = rhs[ln-1].sym.endoffset
			}
			if err := p.applyRule({{if .Options.Cancellable}}ctx, {{end}}rule, &entry, rhs, lexer{{if .NeedsSession}}, &s{{end}}); err != nil {
				return {{if .Parser.HasInputAssocValues}}nil, {{end}}err
			}
			if debugSyntax {
				"fmt".Printf("reduced to: %v\n", symbolName(entry.sym.symbol))
			}
			state = gotoState(stack[len(stack)-1].state, entry.sym.symbol)
			entry.state = state
			stack = append(stack, entry)

		} else if action {{if .Parser.Tables.Optimized}}<{{else}}=={{end}} -1 {
{{- if .Options.Cancellable }}
			if {{if .NeedsSession}}s.{{end}}shiftCounter++; {{if .NeedsSession}}s.{{end}}shiftCounter&0x1ff == 0 {
				// Note: checking for context cancellation is expensive so we do it from time to time.
				select {
				case <-ctx.Done():
					return {{if .Parser.HasInputAssocValues}}nil, {{end}}ctx.Err()
				default:
				}
			}
{{end}}
			// Shift.
{{- if .Parser.Tables.Optimized}}
			state = int{{$stateType}}(-2-action)
{{- else}}
			if p.next.symbol == noToken {
				p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
			}
			state = gotoState(state, p.next.symbol)
			if state >= 0 {
{{- end}}
				stack = append(stack, stackEntry{
					sym:   p.next,
					state: state,
{{- if .Parser.HasAssocValues }}
					value: lexer.Value(),
{{- end}}
				})
				if debugSyntax {
					"fmt".Printf("shift: %v (%s)\n", symbolName(p.next.symbol), lexer.Text())
				}
{{ block "onAfterShift" .}}{{end -}}
{{ template "flushPending" . -}}
				if p.next.symbol != eoiToken {
{{template "reportConsumedNext" . -}}
					p.next.symbol = noToken
				}
{{- if .Parser.IsRecovering }}
				if p.recovering > 0 {
					p.recovering--
				}
{{- end}}
{{- if not .Parser.Tables.Optimized}}
			}
{{- end}}
		}

		if action == {{ if .Parser.Tables.Optimized}}-1{{else}}-2{{end}} || state == -1 {
{{- if .Parser.IsRecovering }}
			if p.recovering == 0 {
				if p.next.symbol == noToken {
					p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
				}
				lastErr = SyntaxError{
{{- if .Options.TokenLine}}
					Line:      lexer.Line(),
{{- end}}
					Offset:    p.next.offset,
					Endoffset: p.next.endoffset,
				}
				if !p.eh(lastErr) {
{{ template "flushPending" . -}}
					return {{if .Parser.HasInputAssocValues}}nil, {{end}}lastErr
				}
			}

			p.recovering = 4
			if stack = p.recoverFromError({{if $.Options.Cancellable}}ctx, {{end}}lexer, stack); stack == nil {
{{ template "flushPending" . -}}
				return {{if .Parser.HasInputAssocValues}}nil, {{end}}lastErr
			}
			state = stack[len(stack)-1].state
{{- else}}
			break
{{- end}}
		}
	}

{{- if not .Parser.IsRecovering }}

	if state != end {
		if p.next.symbol == noToken {
			p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
		}
		err := SyntaxError{
{{- if .Options.TokenLine}}
			Line:      lexer.Line(),
{{- end}}
			Offset:    p.next.offset,
			Endoffset: p.next.endoffset,
		}
		return {{if .Parser.HasInputAssocValues}}nil, {{end}}err
	}
{{- end}}

	return {{if .Parser.HasInputAssocValues}}stack[len(stack)-2].value, {{end}}nil
}

{{ end -}}
{{ end -}}

{{ if .Parser.IsRecovering -}}
const errSymbol = {{ .Parser.ErrorSymbol }}

{{ block "willShift" . -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
{{ if .Options.IsEnabled "willShift" -}}
// willShift checks if "symbol" is going to be shifted in the given state.
func (p *Parser) willShift(stackPos int, state int{{$stateType}}, symbol int32, stack []stackEntry) bool {
	if state == -1 {
		return false
	}

	var stack2alloc [4]int16
	stack2 := append(stack2alloc[:0], state)

	for state != p.endState {
		action := tmAction[state]
{{- if .Parser.Tables.Optimized}}
		if action > tmActionBase {
			pos := action + symbol
			if pos >= 0 && pos < tmTableLen && int32(tmCheck[pos]) == symbol {
				action = int32(tmTable[pos])
			} else {
				action = tmDefAct[state]
			}
		} else {
			action = tmDefAct[state]
		}
{{- else if .Parser.Tables.Lalr}}
		if action < -2 {
			action = lalr(action, symbol)
		}
{{- end}}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])
			symbol := tmRuleSymbol[rule]

			if ln > 0 {
				if ln < len(stack2) {
					state = stack2[len(stack2)-ln-1]
					stack2 = stack2[:len(stack2)-ln]
				} else {
					stackPos -= ln - len(stack2)
					state = stack[stackPos-1].state
					stack2 = stack2alloc[:0]
				}
			}
			state = gotoState(state, symbol)
			stack2 = append(stack2, state)
		} else {
{{- if .Parser.Tables.Optimized}}
			return action < -1
{{- else}}
			return action == -1 && gotoState(state, symbol) >= 0
{{- end}}
		}
	}
	return symbol == eoiToken
}

{{ end -}}
{{ end -}}
{{ block "skipBrokenCode" . -}}
{{ if .Options.IsEnabled "skipBrokenCode" -}}
func (p *Parser) skipBrokenCode({{if $.Options.Cancellable}}ctx "context".Context, {{end}}lexer *Lexer, stack []stackEntry, canRecover func (symbol int32) bool) int {
	var e int
	for p.next.symbol != eoiToken && !canRecover(p.next.symbol) {
		if debugSyntax {
			"fmt".Printf("skipped while recovering: %v (%s)\n", symbolName(p.next.symbol), lexer.Text())
		}
{{ template "flushPending" . -}}
{{ template "reportConsumedNext" . -}}
		e = p.next.endoffset
		p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
	}
	return e
}

{{ end -}}
{{ end -}}
{{ block "recoverFromError" . -}}
{{ if .Options.IsEnabled "recoverFromError" -}}
func (p *Parser) recoverFromError({{if $.Options.Cancellable}}ctx "context".Context, {{end}}lexer *Lexer, stack []stackEntry) []stackEntry {
	var recoverSyms [1 + {{template "tokenPkg" .}}NumTokens/8]uint8
	var recoverPos []int

	if debugSyntax {
		"fmt".Printf("broke at %v\n", symbolName(p.next.symbol))
	}
	for size := len(stack); size > 0; size-- {
		if gotoState(stack[size-1].state, errSymbol) == -1 {
			continue
		}
		recoverPos = append(recoverPos, size)
{{- range .Parser.Tables.Markers}}
{{- if eq (lower .Name) "recoveryscope" }}
{{- if eq (len .States) 1}}
		if {{.Name}}State == stack[size-1].state {
			break
		}
{{- else}}
		if {{.Name}}States[int(stack[size-1].state)] {
			break
		}
{{- end}}
{{- end}}
{{- end}}
	}
	if len(recoverPos) == 0 {
		return nil
	}

	for _, v := range afterErr {
		recoverSyms[v/8] |= 1 << uint32(v%8)
	}
	canRecover := func (symbol int32) bool {
		return recoverSyms[symbol/8]&(1<<uint32(symbol%8)) != 0
	}
	if p.next.symbol == noToken {
		p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
	}
	// By default, insert 'error' in front of the next token.
	s := p.next.offset
	e := s
{{- if .ReportsInvalidToken}}
	for _, tok := range p.pending {
		// Try to cover all nearby invalid tokens.
		if {{template "tokenType" .}}(tok.symbol) == {{template "tokenPkg" .}}{{(index .Syms .Lexer.InvalidToken).ID}} {
			if s > tok.offset {
				s = tok.offset
			}
			e = tok.endoffset
		}
	}
{{- end}}
	for {
		if endoffset := p.skipBrokenCode({{if $.Options.Cancellable}}ctx, {{end}}lexer, stack, canRecover); endoffset > e {
			e = endoffset
		}

		var matchingPos int
		if debugSyntax {
			"fmt".Printf("trying to recover on %v\n", symbolName(p.next.symbol))
		}
		for _, pos := range recoverPos {
			if p.willShift(pos, gotoState(stack[pos-1].state, errSymbol), p.next.symbol, stack) {
				matchingPos = pos
				break
			}
		}
		if matchingPos == 0 {
			if p.next.symbol == eoiToken {
				return nil
			}
			recoverSyms[p.next.symbol/8] &^= 1 << uint32(p.next.symbol%8)
			continue
		}

		if matchingPos < len(stack) {
			if s == e {
				// Avoid producing syntax problems covering trailing whitespace.
				e = stack[len(stack)-1].sym.endoffset
			}
			s = stack[matchingPos].sym.offset
{{- if .ReportTokens true }}
		} else if s == e && len(p.pending) > 0 {
			// This means pending tokens don't contain InvalidTokens.
			for _, tok := range p.pending {
				p.reportIgnoredToken({{if $.Options.Cancellable}}ctx, {{end}}tok)
			}
			p.pending = p.pending[:0]
{{- end}}
		}
{{- if .ReportsInvalidToken}}
		if s != e {
			// Consume trailing invalid tokens.
			for _, tok := range p.pending {
				if {{template "tokenType" .}}(tok.symbol) == {{template "tokenPkg" .}}{{(index .Syms .Lexer.InvalidToken).ID}} && tok.endoffset > e {
					e = tok.endoffset
				}
			}
			var consumed int
			for ; consumed < len(p.pending); consumed++ {
				tok := p.pending[consumed]
				if tok.offset >= e {
					break
				}
				p.reportIgnoredToken({{if $.Options.Cancellable}}ctx, {{end}}tok)
			}
			newSize := len(p.pending) - consumed
			copy(p.pending[:newSize], p.pending[consumed:])
			p.pending = p.pending[:newSize]
		}
{{- end}}
		if debugSyntax {
			for i := len(stack)-1; i >= matchingPos; i-- {
				"fmt".Printf("dropped from stack: %v\n", symbolName(stack[i].sym.symbol))
			}
			"fmt".Println("recovered")
		}
		stack = append(stack[:matchingPos], stackEntry{
			sym:   symbol{errSymbol, s, e},
			state: gotoState(stack[matchingPos-1].state, errSymbol),
		})
		return stack
	}
}

{{ end -}}
{{ end -}}
{{ end -}}

{{ block "lalr" . -}}
{{ if and .Parser.Tables.Lalr (not .Parser.Tables.Optimized) -}}
func lalr(action, next int32) int32 {
	a := -action - 3
	for ; tmLalr[a] >= 0; a += 2 {
		if tmLalr[a] == next {
			break
		}
	}
	return tmLalr[a+1]
}

{{end -}}
{{end -}}

{{ block "gotoState" . -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
func gotoState(state int{{$stateType}}, symbol int32) int{{$stateType}} {
{{ if not .Parser.Tables.Optimized -}}
	min := tmGoto[symbol]
	max := tmGoto[symbol+1]

	if max-min < 32 {
		for i := min; i < max; i += 2 {
			if tmFromTo[i] == state {
				return tmFromTo[i+1]
			}
		}
	} else {
		for min < max {
			e := (min + max) >> 1 &^ int32(1)
			i := tmFromTo[e]
			if i == state {
				return tmFromTo[e+1]
			} else if i < state {
				min = e + 2
			} else {
				max = e
			}
		}
	}
{{ else -}}
{{$checkType := bits_per_element .Parser.Tables.Optimized.Check -}}
	const numTokens = {{$.NumTokens}}
	if symbol >= numTokens {
		pos := tmGoto[symbol-numTokens] + int32(state)
		if pos >= 0 && pos < tmTableLen && tmCheck[pos] == int{{$checkType}}(state) {
			return int{{$stateType}}(tmTable[pos])
		}
		return int{{$stateType}}(tmDefGoto[symbol-numTokens])
	}

	// Shifting a token.
	action := tmAction[state]
	if action == tmActionBase {
		return -1
	}
	pos := action + symbol
	if pos >= 0 && pos < tmTableLen && tmCheck[pos] == int{{$checkType}}(symbol) {
		action = int32(tmTable[pos])
	} else {
		action = tmDefAct[state]
	}
	if action < -1 {
		return int{{$stateType}}(-2-action)
	}
{{ end -}}
	return -1
}

{{ end -}}

{{ block "fetchNext" . -}}
{{ if .Options.IsEnabled "fetchNext" -}}
func (p *Parser) fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx "context".Context, {{end}}lexer *Lexer, stack []stackEntry) {
restart:
	tok := lexer.Next()
	switch tok {
{{- if .ReportTokens true }}
	case {{range $ind, $tok := .ReportTokens true}}{{if ne $ind 0}}, {{end}}{{template "tokenPkg" $}}{{.ID}}{{end}}:
		s, e := lexer.Pos()
		tok := symbol{int32(tok), s, e}
		p.pending = append(p.pending, tok)
		goto restart
{{- end}}
{{- if not .ReportsInvalidToken}}
	case {{template "tokenPkg" .}}{{(index .Syms .Lexer.InvalidToken).ID}}:
		goto restart
{{- end}}
	}
	p.next.symbol = int32(tok)
	p.next.offset, p.next.endoffset = lexer.Pos()
}

{{ end -}}
{{ end -}}

{{ block "lookahead" . -}}
{{ if and .Parser.Tables.Lookaheads (.Options.IsEnabled "lookaheadNext") -}}
func lookaheadNext(lexer *Lexer) int32 {
restart:
	tok := lexer.Next()
	switch tok {
{{- if .ReportTokens true }}
	case {{range $ind, $tok := .ReportTokens true}}{{if ne $ind 0}}, {{end}}{{template "tokenPkg" $}}{{.ID}}{{end}}:
		goto restart
{{- end}}
{{- if not .ReportsInvalidToken}}
	case {{template "tokenPkg" .}}{{(index .Syms .Lexer.InvalidToken).ID}}:
		goto restart
{{- end}}
	}
	return int32(tok)
}

{{ end -}}
{{ end -}}

{{ block "lookaheadRule" . -}}
{{ if and .Parser.Tables.Lookaheads .Options.RecursiveLookaheads -}}
func lookaheadRule({{if $.Options.Cancellable}}ctx "context".Context, {{end}}lexer *Lexer, next, rule int32, s *session) (sym int32{{if $.Options.Cancellable}}, err error{{end}}) {
	switch rule {
{{- range $index, $rule := .Parser.Tables.Lookaheads }}
	case {{sum $index (len $.Parser.Rules)}}:
{{- if $.Options.Cancellable}}
		var ok bool
{{- end}}
		{{ range $rule.Cases }}
		{{- $sym := index $.Syms (sum $.NumTokens (index $.Parser.Inputs .Predicate.Input).Nonterm) -}}
		if {{if $.Options.Cancellable}}ok, err = {{else}}{{if .Predicate.Negated}}!{{end}}{{end -}}
		   lookahead({{if $.Options.Cancellable}}ctx, {{end}}lexer, next, {{.Predicate.Input}}, {{index $.Parser.Tables.FinalStates .Predicate.Input}}{{if $.NeedsSession}}, s{{end}})
		{{- if $.Options.Cancellable}}; {{if .Predicate.Negated}}!{{end}}ok{{end}} {
			sym = {{.Target}} /* {{(index $.Syms .Target).Name}} */
		} else {{end}}{
			sym = {{.DefaultTarget}} /* {{(index $.Syms .DefaultTarget).Name}} */
		}
		return
{{- end}}
	}
	return 0{{if $.Options.Cancellable}}, nil{{end}}
}

{{ end -}}
{{ end -}}

{{ block "lookaheadMethods" . -}}
{{ range $ind, $inp := .Parser.Inputs -}}
{{ if and .Synthetic .NoEoi -}}
{{ $sym := index $.Syms (sum $.NumTokens .Nonterm) -}}
func At{{$sym.Name}}({{if $.Options.Cancellable}}ctx "context".Context, {{end}}lexer *Lexer, next int32{{if $.NeedsSession}}, s *session{{end}}) {{if $.Options.Cancellable}}(bool, error){{else}}bool{{end}} {
	if debugSyntax {
		"fmt".Printf("lookahead {{$sym.Name}}, next: %v\n", symbolName(next))
	}
	return lookahead({{if $.Options.Cancellable}}ctx, {{end}}lexer, next, {{$ind}}, {{index $.Parser.Tables.FinalStates $ind}}{{if $.NeedsSession}}, s{{end}});
}

{{ end -}}
{{ end -}}
{{ end -}}

{{- define "callLookaheadNext"}}{{/*(memoization)*/}}lookaheadNext(&lexer){{end -}}

{{ block "lookaheadFunc" . -}}
{{ if .Parser.Tables.Lookaheads -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
func lookahead({{if $.Options.Cancellable}}ctx "context".Context, {{end}}l *Lexer, next int32, start, end int{{$stateType}}{{if $.NeedsSession}}, s *session{{end}}) {{if $.Options.Cancellable}}(bool, error){{else}}bool{{end}} {
{{ block "setupLookaheadLexer" . -}}
	var lexer Lexer = *l
{{end -}}
{{ if .Options.RecursiveLookaheads }}
	// Use memoization for recursive lookaheads.
	if next == noToken {
		next = {{template "callLookaheadNext" true}}
	}
	key := uint64(l.tokenOffset) + uint64(end)<<40
	if ret, ok := s.cache[key]; ok {
		return ret{{if $.Options.Cancellable}}, nil{{end}}
	}
{{end}}
	var allocated [64]stackEntry
	state := start
	stack := append(allocated[:0], stackEntry{state: state})

	for state != end {
		action := tmAction[state]
{{- if .Parser.Tables.Optimized}}
		if action > tmActionBase {
			// Lookahead is needed.
			if next == noToken {
				next = {{template "callLookaheadNext" false}}
			}
			pos := action + next
			if pos >= 0 && pos < tmTableLen && int32(tmCheck[pos]) == next {
				action = int32(tmTable[pos])
			} else {
				action = tmDefAct[state]
			}
		} else {
			action = tmDefAct[state]
		}
{{- else if .Parser.Tables.Lalr}}
		if action < -2 {
			// Lookahead is needed.
			if next == noToken {
				next = {{template "callLookaheadNext" false}}
			}
			action = lalr(action, next)
		}
{{- end}}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var entry stackEntry
			entry.sym.symbol = tmRuleSymbol[rule]
			stack = stack[:len(stack)-ln]
{{- if .Options.RecursiveLookaheads }}
			sym{{if $.Options.Cancellable}}, err{{end}} := lookaheadRule({{if $.Options.Cancellable}}ctx, {{end}}&lexer, next, rule, s)
{{- if $.Options.Cancellable}}
			if err != nil {
				return false, err
			}
{{- end}}
			if sym != 0 {
				entry.sym.symbol = sym
			}
{{- end}}
			if debugSyntax {
				"fmt".Printf("lookahead reduced to: %v\n", symbolName(entry.sym.symbol))
			}
			state = gotoState(stack[len(stack)-1].state, entry.sym.symbol)
			entry.state = state
			stack = append(stack, entry)

		} else if action {{if .Parser.Tables.Optimized}}< -1{{else}}== -1{{end}} {
{{- if .Options.Cancellable }}
			if {{if .NeedsSession}}s.{{end}}shiftCounter++; {{if .NeedsSession}}s.{{end}}shiftCounter&0x1ff == 0 {
				// Note: checking for context cancellation is expensive so we do it from time to time.
				select {
				case <-ctx.Done():
					return false, ctx.Err()
				default:
				}
			}
{{end}}
			// Shift.
{{- if .Parser.Tables.Optimized}}
			state = int{{$stateType}}(-2-action)
{{- else}}
			if next == noToken {
				next = {{template "callLookaheadNext" false}}
			}
			state = gotoState(state, next)
{{- end}}
			stack = append(stack, stackEntry{
				sym:   symbol{symbol: next},
				state: state,
			})
			if debugSyntax {
				"fmt".Printf("lookahead shift: %v (%s)\n", symbolName(next), lexer.Text())
			}
			if state != -1 && next != eoiToken {
				next = noToken
			}
		}

		if action == {{if .Parser.Tables.Optimized}}-1{{else}}-2{{end}} || state == -1 {
			break
		}
	}

{{ if .Options.RecursiveLookaheads -}}
	s.cache[key] = state == end
{{ end -}}
	if debugSyntax {
		"fmt".Printf("lookahead done: %v\n", state == end)
	}
	return state == end{{if $.Options.Cancellable}}, nil{{end}}
}

{{ end -}}
{{ end -}}

{{ block "applyRule" . -}}
func (p *Parser) applyRule({{if $.Options.Cancellable}}ctx "context".Context, {{end}}rule int32, lhs *stackEntry, rhs []stackEntry, lexer *Lexer{{if .NeedsSession}}, s *session{{end}}) (err error) {
{{- if or .Parser.HasActions .Parser.Tables.Lookaheads }}
	switch rule {
{{- range $index, $rule := .Parser.Rules}}
{{- $fixWS := and $.Options.FixWhitespace ($.HasTrailingNulls $rule) }}
{{- if or (ne $rule.Action 0) $fixWS }}
{{- $act := index $.Parser.Actions $rule.Action }}
{{- if or (ne $act.Code "") $act.Report $fixWS}}
	case {{$index}}: // {{$.RuleString $rule}}
{{- if $fixWS }}
		fixTrailingWS(lhs, rhs)
{{- end}}
{{- range $act.Report}}
{{- $val := index $.Parser.Types.RangeTypes .Type }}
{{- if $.Parser.UsesFlags}}
		p.listener({{template "nodeTypePkg" $}}{{node_id $val.Name}}, {{range $index, $flag := .Flags}}{{if ne $index 0}} | {{end}}{{template "nodeTypePkg" $}}{{$flag}}{{else}}0{{end}}, rhs[{{.Start}}].sym.offset, rhs[{{minus1 .End}}].sym.endoffset)
{{- else}}
		p.listener({{template "nodeTypePkg" $}}{{node_id $val.Name}}, rhs[{{.Start}}].sym.offset, rhs[{{minus1 .End}}].sym.endoffset)
{{- end}}
{{- end}}
{{- if $act.Code }}
{{go_parser_action $act.Code $act.Vars $act.Origin}}
{{- end}}
{{- end}}
{{- end}}
{{- end}}

{{- range $index, $rule := .Parser.Tables.Lookaheads }}
	case {{sum $index (len $.Parser.Rules)}}:
{{- if $.Options.Cancellable}}
		var ok bool
{{- end}}
		{{ range $rule.Cases }}
		{{- $sym := index $.Syms (sum $.NumTokens (index $.Parser.Inputs .Predicate.Input).Nonterm) -}}
		if {{if $.Options.Cancellable}}ok, err = {{else}}{{if .Predicate.Negated}}!{{end}}{{end -}}
			At{{$sym.Name}}({{if $.Options.Cancellable}}ctx, {{end}}lexer, p.next.symbol{{if $.NeedsSession}}, s{{end}})
		{{- if $.Options.Cancellable}}; {{if .Predicate.Negated}}!{{end}}ok{{end}} {
			lhs.sym.symbol = {{.Target}} /* {{(index $.Syms .Target).Name}} */
		} else {{end}}{
			lhs.sym.symbol = {{.DefaultTarget}} /* {{(index $.Syms .DefaultTarget).Name}} */
		}
		return
{{- end}}
	}
{{- end}}
{{- if .Parser.Types }}
	if nt := tmRuleType[rule]; nt != 0 {
{{- if .Parser.UsesFlags}}
		p.listener({{template "nodeTypeRef" $}}(nt&0xffff), {{template "nodeFlagsRef" $}}(nt>>16), lhs.sym.offset, lhs.sym.endoffset)
{{- else}}
		p.listener(nt, lhs.sym.offset, lhs.sym.endoffset)
{{- end}}
	}
{{- end}}
	return
}

{{ end -}}

{{ if .Options.FixWhitespace -}}
{{ block "fixTrailingWS" . -}}
func fixTrailingWS(lhs *stackEntry, rhs []stackEntry) {
	last := len(rhs)-1
	if last < 0 {
		return
	}
	for last >= 0 && rhs[last].sym.offset == rhs[last].sym.endoffset {
		last--
	}
	if last >= 0 {
		lhs.sym.endoffset = rhs[last].sym.endoffset
	} else {
		lhs.sym.endoffset = lhs.sym.offset
	}
}

{{ end -}}
{{ end -}}

{{ if .ReportTokens true -}}
{{ block "reportIgnoredToken" . -}}
func (p *Parser) reportIgnoredToken({{if $.Options.Cancellable}}ctx "context".Context, {{end}}tok symbol) {
{{ block "onBeforeIgnore" .}}{{end -}}
	var t {{template "nodeTypeRef" $}}
{{ if .Lexer.UsesFlags -}}
	var flags {{template "nodeFlagsRef" $}}
{{ end -}}
	switch {{template "tokenType" .}}(tok.symbol) {
{{ range .Lexer.MappedTokens -}}
{{ $sym := index $.Syms .Token -}}
{{ if or $sym.Space (eq $sym.Name "invalid_token") -}}
	case {{template "tokenPkg" $}}{{$sym.ID}}:
		t = {{template "nodeTypePkg" $}}{{node_id .Name}}
{{ if .Flags -}}
		flags = {{range $index, $flag := .Flags}}{{if ne $index 0}} | {{end}}{{template "nodeTypePkg" $}}{{$flag}}{{end}}
{{ end -}}
{{ end -}}
{{ end -}}
	default:
		return
	}
	if debugSyntax {
		"fmt".Printf("ignored: %v as %v\n", {{template "tokenType" .}}(tok.symbol), t)
	}
	p.listener(t, {{if .Parser.UsesFlags}}{{if .Lexer.UsesFlags}}flags{{else}}0{{end}}, {{end}}tok.offset, tok.endoffset)
}
{{ end -}}
{{ end -}}
{{ block "onAfterParser" .}}{{end -}}
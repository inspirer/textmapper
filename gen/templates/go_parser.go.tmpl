{{ template "header" . -}}
package {{short_pkg .Options.Package}}

{{ template "errorHandler" . -}}
{{ template "parserType" . -}}
{{ template "syntaxError" . -}}
{{ template "parserSymbol" . -}}
{{ template "stackEntry" . -}}
{{ template "parserInit" . -}}
{{ template "parserConstants" . -}}
{{ template "parseEntryFuncs" . -}}
{{ template "session" . -}}
{{ template "parseFunc" . -}}
{{ if .Parser.IsRecovering -}}
{{ template "errSymbol" . -}}
{{ template "reduceAll" . -}}
{{ template "skipBrokenCode" . -}}
{{ template "recoverFromError" . -}}
{{ end -}}
{{ template "lalr" . -}}
{{ template "gotoState" . -}}
{{ template "fetchNext" . -}}
{{ template "lookahead" . -}}
{{ template "lookaheadRule" . -}}
{{ template "lookaheadMethods" . -}}
{{ template "lookaheadFunc" . -}}
{{ template "applyRule" . -}}
{{ if and .Options.FixWhitespace (not .Options.TokenStream) -}}
{{ template "fixTrailingWS" . -}}
{{ end -}}
{{ template "reportRange" . -}}
{{ if and (.ReportTokens true) (not .Options.TokenStream) -}}
{{ template "reportIgnoredToken" . -}}
{{ template "parserFlush" . -}}
{{ end -}}
{{ block "onAfterParser" .}}{{end -}}

{{- define "lexerParam"}}{{if .Options.TokenStream}}stream *TokenStream{{else}}lexer *Lexer{{end}}{{end}}
{{- define "lexerArg"}}{{if .Options.TokenStream}}stream{{else}}lexer{{end}}{{end}}

{{- define "customReportNext"}}{{end}}

{{- define "reportConsumedNext" -}}
{{ if not .Options.TokenStream -}}
{{ if .ReportTokens false -}}
			switch {{template "tokenType" .}}(p.next.symbol) {
{{ range .Parser.MappedTokens -}}
{{ $sym := index $.Syms .Token -}}
{{ if not (or $sym.Space (eq $sym.Name "invalid_token")) -}}
	case {{template "tokenPkg" $}}{{$sym.ID}}:
		p.listener({{template "nodeTypePkg" $}}{{node_id .Name}}, {{if $.Parser.UsedFlags}}{{range $index, $flag := .Flags}}{{if ne $index 0}} | {{end}}{{template "nodeFlagsPkg" $}}{{$flag}}{{else}}0{{end}}, {{end}}p.next.offset, p.next.endoffset)
{{ end -}}
{{ end -}}
{{template "customReportNext" . -}}
			}
{{else -}}
{{template "customReportNext" . -}}
{{ end -}}
{{ end -}}
{{ end -}}


{{- define "errorHandler" -}}
{{ if .Parser.IsRecovering -}}
// ErrorHandler is called every time a parser is unable to process some part of the input.
// This handler can return false to abort the parser.
type ErrorHandler func(err SyntaxError) bool

// StopOnFirstError is an error handler that forces the parser to stop on and return the first
// error.
func StopOnFirstError(_ SyntaxError) bool { return false }

{{ end -}}
{{ end -}}

{{- define "parserType" -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
{{ if .Options.IsEnabled "Parser" -}}
// Parser is a table-driven LALR parser for {{.Name}}.
type Parser struct {
{{ if .Parser.IsRecovering -}}
	eh ErrorHandler
{{ end -}}
{{ if .Parser.Types -}}
	listener Listener
{{ end -}}

	next       symbol
{{ if .Parser.IsRecovering -}}
{{ if not .Options.TokenStream -}}
	endState   int{{$stateType}}
{{ end -}}
	recovering int
{{ end -}}
{{ if and (.ReportTokens true) (not .Options.TokenStream) -}}

	// Tokens to be reported with the next shift. Only non-empty when next.symbol != noToken.
	pending []symbol
{{ end }}
{{ block "sharedParserVars" .}}{{end -}}
{{ block "parserVars" .}}{{end -}}
}

{{ end -}}
{{ end -}}


{{- define "syntaxError" -}}
{{ if .Options.IsEnabled "syntaxError" -}}
type SyntaxError struct {
{{ if .Options.TokenLine -}}
	Line      int
{{ end -}}
	Offset    int
	Endoffset int
}

func (e SyntaxError) Error() string {
{{ if .Options.TokenLine -}}
	return "fmt".Sprintf("syntax error at line %v", e.Line)
{{ else -}}
	return "syntax error"
{{ end -}}
}

{{ end -}}
{{ end -}}

{{- define "parserSymbol" -}}
{{ if and (.Options.IsEnabled "symbol") (not .Options.TokenStream) -}}
type symbol struct {
	symbol    int32
	offset    int
	endoffset int
}

{{ end -}}
{{ end -}}

{{- define "stackEntry" -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
{{ if .Options.IsEnabled "stackEntry" -}}
type stackEntry struct {
	sym   symbol
	state int{{$stateType}}
{{ if .Parser.HasAssocValues -}}
	value interface{}
{{ end -}}
}

{{ end -}}
{{ end -}}


{{- define "parserInit" -}}
{{ if .Options.IsEnabled "ParserInit" -}}
func (p *Parser) Init({{if .Parser.IsRecovering }}eh ErrorHandler{{end}}{{if .Parser.Types }}{{if .Parser.IsRecovering }}, {{end}}l Listener{{end}}) {
{{ if .Parser.IsRecovering -}}
	p.eh = eh
{{ end -}}
{{ if .Parser.Types -}}
	p.listener = l
{{ end -}}
{{ if and (.ReportTokens true) (not .Options.TokenStream) -}}
	if cap(p.pending) < startTokenBufferSize {
		p.pending = make([]symbol, 0, startTokenBufferSize)
	}
{{ end -}}
{{ block "initSharedParserVars" .}}{{end -}}
{{ block "initParserVars" .}}{{end -}}
}

{{ end -}}
{{ end -}}

{{- define "parserConstants" -}}
const (
	startStackSize = 256
{{ if .ReportTokens true -}}
	startTokenBufferSize = 16
{{ end -}}
	noToken        = int32({{template "tokenPkg" .}}UNAVAILABLE)
	eoiToken       = int32({{template "tokenPkg" .}}EOI)
	debugSyntax    = {{ .Options.DebugParser }}
)

{{ end -}}

{{- define "parseEntryFuncs" -}}
{{ range $index, $inp := .Parser.Inputs -}}
{{ if $inp.Synthetic }}{{continue}}{{end -}}
{{ $nt := index $.Parser.Nonterms $inp.Nonterm -}}
func (p *Parser) Parse{{if $.Parser.HasMultipleUserInputs}}{{$.NontermID $inp.Nonterm}}{{end}}({{if $.Options.Cancellable}}ctx "context".Context, {{end}}{{template "lexerParam" $}}) {{if eq $nt.Type ""}}error{{else}}({{$nt.Type}}, error){{end}} {
{{ if $.Parser.HasInputAssocValues -}}
	{{if ne $nt.Type ""}}v{{else}}_{{end}}, err := p.parse({{if $.Options.Cancellable}}ctx, {{end}}{{$index}}, {{index $.Parser.Tables.FinalStates $index}}, {{template "lexerArg" $}})
{{ if ne $nt.Type "" -}}
	val, _ := v.({{$nt.Type}})
	return val, err
{{ else -}}
	return err
{{ end -}}
{{ else -}}
	return p.parse({{if $.Options.Cancellable}}ctx, {{end}}{{$index}}, {{index $.Parser.Tables.FinalStates $index}}, {{template "lexerArg" $}})
{{ end -}}
}

{{ end -}}
{{ end -}}

{{- define "session" -}}
{{ if and .NeedsSession (.Options.IsEnabled "session") -}}
type session struct {
{{ if $.Options.Cancellable -}}
	shiftCounter int32
{{ end -}}
{{ if .Options.RecursiveLookaheads -}}
	cache map[uint64]bool
{{ end -}}
}

{{ end -}}
{{ end -}}

{{- define "parseFunc" -}}
{{ $stateType := bits_per_element .Parser.Tables.FromTo -}}
{{ if .Options.IsEnabled "parse" -}}
func (p *Parser) parse({{if $.Options.Cancellable}}ctx "context".Context, {{end}}start, end int{{$stateType}}, {{template "lexerParam" .}}) {{if .Parser.HasInputAssocValues}}(interface{}, error){{else}}error{{end}} {
{{ if and (.ReportTokens true) (not .Options.TokenStream) -}}
	p.pending = p.pending[:0]
{{ end -}}
{{ if .NeedsSession -}}
	var s session
{{ if .Options.RecursiveLookaheads -}}
	s.cache = make(map[uint64]bool)
{{ end -}}
{{ else if .Options.Cancellable -}}
	var shiftCounter int

{{ end -}}
	state := start
{{ if .Parser.IsRecovering -}}
	var lastErr SyntaxError
	p.recovering = 0
{{ end -}}

	var alloc [startStackSize]stackEntry
	stack := append(alloc[:0], stackEntry{state: state})
{{ if and .Parser.IsRecovering (not .Options.TokenStream) -}}
	p.endState = end
{{ end -}}
{{ if .Options.TokenStream -}}
	p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}stack, end)
{{ else -}}
	p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}

	for state != end {
		action := tmAction[state]
{{ if .Parser.Tables.Optimized -}}
		if action > tmActionBase {
			// Lookahead is needed.
			if p.next.symbol == noToken {
{{ if .Options.TokenStream -}}
				p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}stack, end)
{{ else -}}
				p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}
			}
			pos := action + p.next.symbol
			if pos >= 0 && pos < tmTableLen && int32(tmCheck[pos]) == p.next.symbol {
				action = int32(tmTable[pos])
			} else {
				action = tmDefAct[state]
			}
		} else {
			action = tmDefAct[state]
		}
{{ else if .Parser.Tables.Lalr -}}
		if action < -2 {
			// Lookahead is needed.
			if p.next.symbol == noToken {
{{ if .Options.TokenStream -}}
				p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}stack, end)
{{ else -}}
				p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}
			}
			action = lalr(action, p.next.symbol)
		}
{{ end -}}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var entry stackEntry
			entry.sym.symbol = tmRuleSymbol[rule]
			rhs := stack[len(stack)-ln:]
{{ if and .Options.FixWhitespace .Options.TokenStream -}}
			for ln > 0 && rhs[ln-1].sym.offset == rhs[ln-1].sym.endoffset {
				ln--
			}
{{ end -}}
			if ln == 0 {
				if p.next.symbol == noToken {
{{ if .Options.TokenStream -}}
					p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}stack, end)
{{ else -}}
					p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}
				}
				entry.sym.offset, entry.sym.endoffset = p.next.offset, p.next.offset
			} else {
				entry.sym.offset = rhs[0].sym.offset
				entry.sym.endoffset = rhs[ln-1].sym.endoffset
			}
			if err := p.applyRule({{if .Options.Cancellable}}ctx, {{end}}rule, &entry, stack, {{template "lexerArg" .}}{{if .NeedsSession}}, &s{{end}}); err != nil {
				return {{if .Parser.HasInputAssocValues}}nil, {{end}}err
			}
			stack = stack[:len(stack)-len(rhs)]
			if debugSyntax {
				"fmt".Printf("reduced to: %v\n", symbolName(entry.sym.symbol))
			}
			state = gotoState(stack[len(stack)-1].state, entry.sym.symbol)
			entry.state = state
			stack = append(stack, entry)

		} else if action {{if .Parser.Tables.Optimized}}<{{else}}=={{end}} -1 {
{{ if .Options.Cancellable -}}
			if {{if .NeedsSession}}s.{{end}}shiftCounter++; {{if .NeedsSession}}s.{{end}}shiftCounter&0x1ff == 0 {
				// Note: checking for context cancellation is expensive so we do it from time to time.
				select {
				case <-ctx.Done():
					return {{if .Parser.HasInputAssocValues}}nil, {{end}}ctx.Err()
				default:
				}
			}

{{ end -}}
			// Shift.
{{ if .Parser.Tables.Optimized -}}
			state = int{{$stateType}}(-2-action)
{{ else -}}
			if p.next.symbol == noToken {
{{ if .Options.TokenStream -}}
				p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}stack, end)
{{ else -}}
				p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}
			}
			state = gotoState(state, p.next.symbol)
			if state >= 0 {
{{ end -}}
				stack = append(stack, stackEntry{
					sym:   p.next,
					state: state,
{{ if .Parser.HasAssocValues -}}
					value: {{template "lexerArg" .}}.Value(),
{{ end -}}
				})
				if debugSyntax {
					"fmt".Printf("shift: %v (%s)\n", symbolName(p.next.symbol), {{if .Options.TokenStream}}stream.text(p.next){{else}}lexer.Text(){{end}})
				}
{{ block "onAfterShift" .}}{{end -}}
{{ if .ReportTokens true -}}
				{{if .Options.TokenStream}}stream{{else}}p{{end}}.flush({{if $.Options.Cancellable}}ctx, {{end}}p.next)
{{ end -}}
				if p.next.symbol != eoiToken {
{{ template "reportConsumedNext" . -}}
					p.next.symbol = noToken
				}
{{ if .Parser.IsRecovering -}}
				if p.recovering > 0 {
					p.recovering--
				}
{{ end -}}
{{ if not .Parser.Tables.Optimized -}}
			}
{{ end -}}
		}

		if action == {{ if .Parser.Tables.Optimized}}-1{{else}}-2{{end}} || state == -1 {
{{ if .Parser.IsRecovering -}}
			if p.recovering == 0 {
				if p.next.symbol == noToken {
{{ if .Options.TokenStream -}}
					p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}stack, end)
{{ else -}}
					p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}
				}
				lastErr = SyntaxError{
{{ if .Options.TokenLine -}}
					Line:      {{if .Options.TokenStream}}stream.line(){{else}}lexer.Line(){{end}},
{{ end -}}
					Offset:    p.next.offset,
					Endoffset: p.next.endoffset,
				}
				if !p.eh(lastErr) {
{{ if .ReportTokens true -}}
					{{if .Options.TokenStream}}stream{{else}}p{{end}}.flush({{if $.Options.Cancellable}}ctx, {{end}}p.next)
{{ end -}}
					return {{if .Parser.HasInputAssocValues}}nil, {{end}}lastErr
				}
			}

			p.recovering = 4
			stack = p.recoverFromError({{if $.Options.Cancellable}}ctx, {{end}}{{template "lexerArg" .}}, stack, end)
			if stack == nil {
{{ if .ReportTokens true -}}
				{{if .Options.TokenStream}}stream{{else}}p{{end}}.flush({{if $.Options.Cancellable}}ctx, {{end}}p.next)
{{ end -}}
				return {{if .Parser.HasInputAssocValues}}nil, {{end}}lastErr
			}
			state = stack[len(stack)-1].state
{{ else -}}
			break
{{ end -}}
		}
	}

{{ if not .Parser.IsRecovering -}}
	if state != end {
		if p.next.symbol == noToken {
{{ if .Options.TokenStream -}}
			p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}stack, end)
{{ else -}}
			p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}
		}
		err := SyntaxError{
{{ if .Options.TokenLine -}}
			Line:      {{if .Options.TokenStream}}stream.line(){{else}}lexer.Line(){{end}},
{{ end -}}
			Offset:    p.next.offset,
			Endoffset: p.next.endoffset,
		}
		return {{if .Parser.HasInputAssocValues}}nil, {{end}}err
	}

{{ end -}}
	return {{if .Parser.HasInputAssocValues}}stack[len(stack)-2].value, {{end}}nil
}

{{ end -}}
{{ end -}}

{{- define "errSymbol" -}}
const errSymbol = {{ .Parser.ErrorSymbol }}

{{ end -}}

{{- define "reduceAll" -}}
{{ if .Options.IsEnabled "reduceAll" -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
// reduceAll simulates all pending reductions and returns true if the parser
// can consume the next token in the `stack+[state]` parsing stack. This
// function also returns the state of the parser after the reductions have been
// applied (but before symbol is shifted).
func reduceAll(stack []stackEntry, state int{{$stateType}}, symbol int32, endState int{{$stateType}}) (int{{$stateType}}, bool) {
	if symbol == noToken {
		panic("a valid next token is expected")
	}
	if state < 0 {
		return 0, false
	}

	var stack2alloc [4]int{{$stateType}}
	stack2 := append(stack2alloc[:0], state)
	size := len(stack)

	// parsing_stack = stack[:size] + stack2
	for state != endState {
		action := tmAction[state]
{{ if .Parser.Tables.Optimized -}}
		if action > tmActionBase {
			pos := action + symbol
			if pos >= 0 && pos < tmTableLen && int32(tmCheck[pos]) == symbol {
				action = int32(tmTable[pos])
			} else {
				action = tmDefAct[state]
			}
		} else {
			action = tmDefAct[state]
		}
{{ else if .Parser.Tables.Lalr -}}
		if action < -2 {
			action = lalr(action, symbol)
		}
{{ end -}}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])
			symbol := tmRuleSymbol[rule]

			if ln > 0 {
				if ln < len(stack2) {
					state = stack2[len(stack2)-ln-1]
					stack2 = stack2[:len(stack2)-ln]
				} else {
					size -= ln - len(stack2)
					state = stack[size-1].state
					stack2 = stack2alloc[:0]
				}
			}
			state = gotoState(state, symbol)
			stack2 = append(stack2, state)
		} else {
{{ if .Parser.Tables.Optimized -}}
			return state, action < -1
{{ else -}}
			return state, action == -1 && gotoState(state, symbol) >= 0
{{ end -}}
		}
	}
	return state, symbol == eoiToken
}

{{ end -}}
{{ end -}}

{{- define "skipBrokenCode" -}}
{{ if .Options.IsEnabled "skipBrokenCode" -}}
func (p *Parser) skipBrokenCode({{if $.Options.Cancellable}}ctx "context".Context, {{end}}{{template "lexerParam" .}}, {{ if not .Options.TokenStream }}stack []stackEntry, {{end}}canRecover func (symbol int32) bool) int {
	var e int
	for p.next.symbol != eoiToken && !canRecover(p.next.symbol) {
		if debugSyntax {
			"fmt".Printf("skipped while recovering: %v (%s)\n", symbolName(p.next.symbol), {{if .Options.TokenStream}}stream.text(p.next){{else}}lexer.Text(){{end}})
		}
{{ if .ReportTokens true -}}
		{{if .Options.TokenStream}}stream{{else}}p{{end}}.flush({{if $.Options.Cancellable}}ctx, {{end}}p.next)
{{ end -}}
{{ template "reportConsumedNext" . -}}
		e = p.next.endoffset
{{ if .Options.TokenStream -}}
		p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}nil, -1)
{{ else -}}
		p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}
	}
	return e
}

{{ end -}}
{{ end -}}

{{- define "recoverFromError" -}}
{{ if .Options.IsEnabled "recoverFromError" -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
func (p *Parser) recoverFromError({{if $.Options.Cancellable}}ctx "context".Context, {{end}}{{template "lexerParam" .}}, stack []stackEntry, endState int{{$stateType}}) []stackEntry {
	var recoverSyms [1 + {{template "tokenPkg" .}}NumTokens/8]uint8
	var recoverPos []int

	if debugSyntax {
		"fmt".Printf("broke at %v\n", symbolName(p.next.symbol))
	}
	for size := len(stack); size > 0; size-- {
		if gotoState(stack[size-1].state, errSymbol) == -1 {
			if debugSyntax {
				"fmt".Printf("no error recovery on %s\n", symbolName(stack[size-1].sym.symbol))
			}
			continue
		}
		if debugSyntax {
			"fmt".Printf("error recovery possible on %s\n", symbolName(stack[size-1].sym.symbol))
		}
		recoverPos = append(recoverPos, size)
{{ range .Parser.Tables.Markers -}}
{{ if eq (lower .Name) "recoveryscope" -}}
{{ if eq (len .States) 1 -}}
		if {{.Name}}State == stack[size-1].state {
			if debugSyntax {
				"fmt".Printf("found a .{{.Name}} marker, confine error to %s\n", symbolName(stack[size-1].sym.symbol))
			}
			break
		}
{{ else -}}
		if {{.Name}}States[int(stack[size-1].state)] {
			break
		}
{{ end -}}
{{ end -}}
{{ end -}}
	}
	if debugSyntax {
		"fmt".Print("possible recovery positions:")
		for _, stackIndex := range recoverPos {
			"fmt".Printf(" %s", symbolName(stack[stackIndex-1].sym.symbol))
		}
		"fmt".Print("\n")
	}
	if len(recoverPos) == 0 {
		return nil
	}

	for _, v := range afterErr {
		recoverSyms[v/8] |= 1 << uint32(v%8)
	}
	canRecover := func (symbol int32) bool {
		return recoverSyms[symbol/8]&(1<<uint32(symbol%8)) != 0
	}
	if p.next.symbol == noToken {
{{ if .Options.TokenStream -}}
		p.next = stream.next({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}stack, endState)
{{ else -}}
		p.fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx, {{end}}lexer, stack)
{{ end -}}
	}
	// By default, insert 'error' in front of the next token.
	s := p.next.offset
	e := s
{{ if .ReportsInvalidToken -}}
	for _, tok := range {{ if .Options.TokenStream }}stream{{else}}p{{end}}.pending {
		// Try to cover all nearby invalid tokens.
		if {{template "tokenType" .}}(tok.symbol) == {{template "tokenPkg" .}}{{(index .Syms .Lexer.InvalidToken).ID}} {
			if s > tok.offset {
				s = tok.offset
			}
			e = tok.endoffset
		}
	}
{{ end -}}
	for {
		if endoffset := p.skipBrokenCode({{if $.Options.Cancellable}}ctx, {{end}}{{template "lexerArg" .}}, {{ if not .Options.TokenStream }}stack, {{end}}canRecover); endoffset > e {
			e = endoffset
		}

		var matchingPos int
		if debugSyntax {
			"fmt".Printf("trying to recover on %v\n", symbolName(p.next.symbol))
		}
		for _, pos := range recoverPos {
			if _, ok := reduceAll(stack[:pos], gotoState(stack[pos-1].state, errSymbol), p.next.symbol, endState); ok {
				matchingPos = pos
				break
			}
		}
		if matchingPos == 0 {
			if p.next.symbol == eoiToken {
				return nil
			}
			recoverSyms[p.next.symbol/8] &^= 1 << uint32(p.next.symbol%8)
			continue
		}

		if matchingPos < len(stack) {
			if s == e {
				// Avoid producing syntax problems covering trailing whitespace.
				e = stack[len(stack)-1].sym.endoffset
			}
			s = stack[matchingPos].sym.offset
		}
{{ if .ReportsInvalidToken -}}
		if s != e {
			// Try to cover all trailing invalid tokens.
			for _, tok := range {{if .Options.TokenStream}}stream{{else}}p{{end}}.pending {
				if {{template "tokenType" .}}(tok.symbol) == {{template "tokenPkg" .}}{{(index .Syms .Lexer.InvalidToken).ID}} && tok.endoffset > e {
					e = tok.endoffset
				}
			}
		}
{{ end -}}
		if debugSyntax {
			for i := len(stack)-1; i >= matchingPos; i-- {
				"fmt".Printf("dropped from stack: %v\n", symbolName(stack[i].sym.symbol))
			}
			"fmt".Println("recovered")
		}
{{ if .ReportTokens true -}}
		{{if .Options.TokenStream}}stream{{else}}p{{end}}.flush({{if $.Options.Cancellable}}ctx, {{end}}symbol{errSymbol, s, e})
{{ end -}}
		stack = append(stack[:matchingPos], stackEntry{
			sym:   symbol{errSymbol, s, e},
			state: gotoState(stack[matchingPos-1].state, errSymbol),
		})
		return stack
	}
}

{{ end -}}
{{ end -}}

{{- define "lalr" -}}
{{ if and .Parser.Tables.Lalr (not .Parser.Tables.Optimized) -}}
func lalr(action, next int32) int32 {
	a := -action - 3
	for ; tmLalr[a] >= 0; a += 2 {
		if tmLalr[a] == next {
			break
		}
	}
	return tmLalr[a+1]
}

{{ end -}}
{{ end -}}

{{- define "gotoState" -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
func gotoState(state int{{$stateType}}, symbol int32) int{{$stateType}} {
{{ if not .Parser.Tables.Optimized -}}
	min := tmGoto[symbol]
	max := tmGoto[symbol+1]

	if max-min < 32 {
		for i := min; i < max; i += 2 {
			if tmFromTo[i] == state {
				return tmFromTo[i+1]
			}
		}
	} else {
		for min < max {
			e := (min + max) >> 1 &^ int32(1)
			i := tmFromTo[e]
			if i == state {
				return tmFromTo[e+1]
			} else if i < state {
				min = e + 2
			} else {
				max = e
			}
		}
	}
{{ else -}}
{{$checkType := bits_per_element .Parser.Tables.Optimized.Check -}}
	const numTokens = {{$.NumTokens}}
	if symbol >= numTokens {
		pos := tmGoto[symbol-numTokens] + int32(state)
		if pos >= 0 && pos < tmTableLen && tmCheck[pos] == int{{$checkType}}(state) {
			return int{{$stateType}}(tmTable[pos])
		}
		return int{{$stateType}}(tmDefGoto[symbol-numTokens])
	}

	// Shifting a token.
	action := tmAction[state]
	if action == tmActionBase {
		return -1
	}
	pos := action + symbol
	if pos >= 0 && pos < tmTableLen && tmCheck[pos] == int{{$checkType}}(symbol) {
		action = int32(tmTable[pos])
	} else {
		action = tmDefAct[state]
	}
	if action < -1 {
		return int{{$stateType}}(-2-action)
	}
{{ end -}}
	return -1
}

{{ end -}}

{{- define "fetchNext" -}}
{{ if and (.Options.IsEnabled "fetchNext") (not .Options.TokenStream) -}}
func (p *Parser) fetchNext({{if and $.Options.Cancellable $.Options.CancellableFetch}}ctx "context".Context, {{end}}{{template "lexerParam" .}}, stack []stackEntry) {
restart:
	tok := lexer.Next()
	switch tok {
{{ if .ReportTokens true -}}
	case {{range $ind, $tok := .ReportTokens true}}{{if ne $ind 0}}, {{end}}{{template "tokenPkg" $}}{{.ID}}{{end}}:
		s, e := lexer.Pos()
		tok := symbol{int32(tok), s, e}
		p.pending = append(p.pending, tok)
		goto restart
{{ end -}}
{{ if not .ReportsInvalidToken -}}
	case {{template "tokenPkg" .}}{{(index .Syms .Lexer.InvalidToken).ID}}:
		goto restart
{{ end -}}
	}
	p.next.symbol = int32(tok)
	p.next.offset, p.next.endoffset = lexer.Pos()
}

{{ end -}}
{{ end -}}

{{- define "lookahead" -}}
{{ if and .Parser.Tables.Lookaheads (.Options.IsEnabled "lookaheadNext") (not .Options.TokenStream) -}}
func lookaheadNext(lexer *Lexer) symbol {
restart:
	tok := lexer.Next()
	switch tok {
{{ if .ReportTokens true -}}
	case {{range $ind, $tok := .ReportTokens true}}{{if ne $ind 0}}, {{end}}{{template "tokenPkg" $}}{{.ID}}{{end}}:
		goto restart
{{ end -}}
{{ if not .ReportsInvalidToken -}}
	case {{template "tokenPkg" .}}{{(index .Syms .Lexer.InvalidToken).ID}}:
		goto restart
{{ end -}}
	}
	s, e := lexer.Pos()
	return symbol{int32(tok), s, e}
}

{{ end -}}
{{ end -}}

{{- define "lookaheadRule" -}}
{{ if and .Parser.Tables.Lookaheads .Options.RecursiveLookaheads -}}
func lookaheadRule({{if $.Options.Cancellable}}ctx "context".Context, {{end}}{{template "lexerParam" .}}, next symbol, rule int32, s *session) (sym int32{{if $.Options.Cancellable}}, err error{{end}}) {
	switch rule {
{{ range $index, $rule := .Parser.Tables.Lookaheads -}}
	case {{sum $index (len $.Parser.Rules)}}:
{{ if $.Options.Cancellable -}}
		var ok bool
{{ end -}}
		{{ range $rule.Cases }}
		{{- $sym := index $.Syms (sum $.NumTokens (index $.Parser.Inputs .Predicate.Input).Nonterm) -}}
		if {{if $.Options.Cancellable}}ok, err = {{else}}{{if .Predicate.Negated}}!{{end}}{{end -}}
		   lookahead({{if $.Options.Cancellable}}ctx, {{end}}{{template "lexerArg" $}}, next, {{.Predicate.Input}}, {{index $.Parser.Tables.FinalStates .Predicate.Input}}{{if $.NeedsSession}}, s{{end}})
		{{- if $.Options.Cancellable}}; {{if .Predicate.Negated}}!{{end}}ok{{end}} {
			sym = {{.Target}} /* {{(index $.Syms .Target).Name}} */
		} else {{end}}{
			sym = {{.DefaultTarget}} /* {{(index $.Syms .DefaultTarget).Name}} */
		}
		return
{{ end -}}
	}
	return 0{{if $.Options.Cancellable}}, nil{{end}}
}

{{ end -}}
{{ end -}}

{{- define "lookaheadMethods" -}}
{{ if .Parser.Tables.Lookaheads -}}
{{ range $ind, $inp := .Parser.Inputs -}}
{{ if and .Synthetic .NoEoi -}}
{{ $sym := index $.Syms (sum $.NumTokens .Nonterm) -}}
func At{{$sym.Name}}({{if $.Options.Cancellable}}ctx "context".Context, {{end}}{{template "lexerParam" $}}, next symbol{{if $.NeedsSession}}, s *session{{end}}) {{if $.Options.Cancellable}}(bool, error){{else}}bool{{end}} {
	if debugSyntax {
		"fmt".Printf("lookahead {{$sym.Name}}, next: %v\n", symbolName(next.symbol))
	}
	return lookahead({{if $.Options.Cancellable}}ctx, {{end}}{{template "lexerArg" $}}, next, {{$ind}}, {{index $.Parser.Tables.FinalStates $ind}}{{if $.NeedsSession}}, s{{end}});
}

{{ end -}}
{{ end -}}
{{ end -}}
{{ end -}}

{{- define "lookaheadNextArgs"}}{{/*(memoization)*/}}{{end -}}

{{- define "lookaheadFunc" -}}
{{ if .Parser.Tables.Lookaheads -}}
{{$stateType := bits_per_element .Parser.Tables.FromTo -}}
func lookahead({{if $.Options.Cancellable}}ctx "context".Context, {{end}}{{ if .Options.TokenStream }}ts *TokenStream{{else}}l *Lexer{{end}}, next symbol, start, end int{{$stateType}}{{if $.NeedsSession}}, s *session{{end}}) {{if $.Options.Cancellable}}(bool, error){{else}}bool{{end}} {
{{ if .Options.TokenStream -}}
	stream := ts.Copy()
{{ else -}}
	lexer := l.Copy()
{{ end -}}
{{ if .Options.RecursiveLookaheads -}}
	// Use memoization for recursive lookaheads.
	if next.symbol == noToken {
		next = {{ if .Options.TokenStream }}stream.next(nil /*stack*/, end){{else}}lookaheadNext(&{{template "lexerArg" $}}{{template "lookaheadNextArgs" true}}){{end}}
	}
	key := uint64(next.offset) + uint64(end)<<40
	if ret, ok := s.cache[key]; ok {
		return ret{{if $.Options.Cancellable}}, nil{{end}}
	}

{{ end -}}
	var allocated [64]stackEntry
	state := start
	stack := append(allocated[:0], stackEntry{state: state})

	for state != end {
		action := tmAction[state]
{{ if .Parser.Tables.Optimized -}}
		if action > tmActionBase {
			// Lookahead is needed.
			if next.symbol == noToken {
				next = {{ if .Options.TokenStream }}stream.next(stack, end){{else}}lookaheadNext(&{{template "lexerArg" $}}{{template "lookaheadNextArgs" false}}){{end}}
			}
			pos := action + next.symbol
			if pos >= 0 && pos < tmTableLen && int32(tmCheck[pos]) == next.symbol {
				action = int32(tmTable[pos])
			} else {
				action = tmDefAct[state]
			}
		} else {
			action = tmDefAct[state]
		}
{{ else if .Parser.Tables.Lalr -}}
		if action < -2 {
			// Lookahead is needed.
			if next.symbol == noToken {
				next = {{ if .Options.TokenStream }}stream.next(stack, end){{else}}lookaheadNext(&{{template "lexerArg" $}}{{template "lookaheadNextArgs" false}}){{end}}
			}
			action = lalr(action, next.symbol)
		}
{{ end -}}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var entry stackEntry
			entry.sym.symbol = tmRuleSymbol[rule]
			stack = stack[:len(stack)-ln]
{{ if .Options.RecursiveLookaheads -}}
			sym{{if $.Options.Cancellable}}, err{{end}} := lookaheadRule({{if $.Options.Cancellable}}ctx, {{end}}&{{template "lexerArg" .}}, next, rule, s)
{{ if $.Options.Cancellable -}}
			if err != nil {
				return false, err
			}
{{ end -}}
			if sym != 0 {
				entry.sym.symbol = sym
			}
{{ end -}}
			if debugSyntax {
				"fmt".Printf("lookahead reduced to: %v\n", symbolName(entry.sym.symbol))
			}
			state = gotoState(stack[len(stack)-1].state, entry.sym.symbol)
			entry.state = state
			stack = append(stack, entry)

		} else if action {{if .Parser.Tables.Optimized}}< -1{{else}}== -1{{end}} {
{{ if .Options.Cancellable -}}
			if {{if .NeedsSession}}s.{{end}}shiftCounter++; {{if .NeedsSession}}s.{{end}}shiftCounter&0x1ff == 0 {
				// Note: checking for context cancellation is expensive so we do it from time to time.
				select {
				case <-ctx.Done():
					return false, ctx.Err()
				default:
				}
			}

{{ end -}}
			// Shift.
{{ if .Parser.Tables.Optimized -}}
			state = int{{$stateType}}(-2-action)
{{ else -}}
			if next.symbol == noToken {
				next = {{ if .Options.TokenStream }}stream.next(stack, end){{else}}lookaheadNext(&{{template "lexerArg" $}}{{template "lookaheadNextArgs" false}}){{end}}
			}
			state = gotoState(state, next.symbol)
{{ end -}}
			stack = append(stack, stackEntry{
				sym:   next,
				state: state,
			})
			if debugSyntax {
				"fmt".Printf("lookahead shift: %v (%s)\n", symbolName(next.symbol), {{if .Options.TokenStream}}stream.text(next){{else}}lexer.Text(){{end}})
			}
			if state != -1 && next.symbol != eoiToken {
				next.symbol = noToken
			}
		}

		if action == {{if .Parser.Tables.Optimized}}-1{{else}}-2{{end}} || state == -1 {
			break
		}
	}

{{ if .Options.RecursiveLookaheads -}}
	s.cache[key] = state == end
{{ end -}}
	if debugSyntax {
		"fmt".Printf("lookahead done: %v\n", state == end)
	}
	return state == end{{if $.Options.Cancellable}}, nil{{end}}
}

{{ end -}}
{{ end -}}

{{- define "applyRule" -}}
func (p *Parser) applyRule({{if $.Options.Cancellable}}ctx "context".Context, {{end}}rule int32, lhs *stackEntry, stack []stackEntry, {{template "lexerParam" .}}{{if .NeedsSession}}, s *session{{end}}) (err error) {
{{ if or .Parser.HasActions .Parser.Tables.Lookaheads -}}
	switch rule {
{{ range $index, $rule := .Parser.Rules -}}
{{ $rulelen := index $.Parser.Tables.RuleLen $index -}}
{{ $fixWS := and $.Options.FixWhitespace ($.HasTrailingNulls $rule) (not $.Options.TokenStream) -}}
{{ if or (ne $rule.Action 0) $fixWS -}}
{{ $act := index $.Parser.Actions $rule.Action -}}
{{ if or (ne $act.Code "") $act.Report $fixWS -}}
	case {{$index}}: // {{$.RuleString $rule}}
{{ if $fixWS -}}
		fixTrailingWS(lhs, stack[len(stack)-{{$rulelen}}:])
{{ end -}}
{{ range $act.Report -}}
{{ $val := index $.Parser.Types.RangeTypes .Type -}}
{{ if eq .Start .End -}}
		p.listener({{template "nodeTypePkg" $}}{{node_id $val.Name}}, {{ if $.Parser.UsedFlags }}
		       {{- range $index, $flag := .Flags}}{{if ne $index 0}} | {{end}}{{template "nodeFlagsPkg" $}}{{$flag}}{{else}}0{{end}}, {{end}}
			   stack[len(stack)-{{sub $rulelen .End}}].sym.offset, stack[len(stack)-{{sub $rulelen .End}}].sym.offset)
{{ else -}}
		p.{{if $.Options.FixWhitespace}}reportRange{{else}}listener{{end}}({{template "nodeTypePkg" $}}{{node_id $val.Name}}, {{ if $.Parser.UsedFlags }}
		       {{- range $index, $flag := .Flags}}{{if ne $index 0}} | {{end}}{{template "nodeFlagsPkg" $}}{{$flag}}{{else}}0{{end}}, {{end}}
			   {{- if $.Options.FixWhitespace}}stack[len(stack)-{{sub $rulelen .Start}}:len(stack)-{{sub $rulelen .End}}]{{else}}stack[len(stack)-{{sub $rulelen .Start}}].sym.offset, stack[len(stack)-{{sub $rulelen (minus1 .End)}}].sym.endoffset{{end}})
{{ end -}}
{{ end -}}
{{ if $act.Code -}}
{{go_parser_action $act.Code $act.Vars $act.Origin}}
{{ end -}}
{{ end -}}
{{ end -}}
{{ end -}}
{{ range $index, $rule := .Parser.Tables.Lookaheads -}}
	case {{sum $index (len $.Parser.Rules)}}:
{{ if $.Options.Cancellable -}}
		var ok bool
{{ end -}}
		{{ range $rule.Cases }}
		{{- $sym := index $.Syms (sum $.NumTokens (index $.Parser.Inputs .Predicate.Input).Nonterm) -}}
		if {{if $.Options.Cancellable}}ok, err = {{else}}{{if .Predicate.Negated}}!{{end}}{{end -}}
			At{{$sym.Name}}({{if $.Options.Cancellable}}ctx, {{end}}{{template "lexerArg" $}}, p.next{{if $.NeedsSession}}, s{{end}})
		{{- if $.Options.Cancellable}}; {{if .Predicate.Negated}}!{{end}}ok{{end}} {
			lhs.sym.symbol = {{.Target}} /* {{(index $.Syms .Target).Name}} */
		} else {{end}}{
			lhs.sym.symbol = {{.DefaultTarget}} /* {{(index $.Syms .DefaultTarget).Name}} */
		}
		return
{{ end -}}
	}
{{ end -}}
{{ if .Parser.Types -}}
	if nt := tmRuleType[rule]; nt != 0 {
{{ if .Parser.UsedFlags -}}
		p.listener({{template "nodeTypeRef" $}}(nt&0xffff), {{template "nodeFlagsRef" $}}(nt>>16), lhs.sym.offset, lhs.sym.endoffset)
{{ else -}}
		p.listener(nt, lhs.sym.offset, lhs.sym.endoffset)
{{ end -}}
	}
{{ end -}}
	return
}

{{ end -}}

{{- define "fixTrailingWS" -}}
func fixTrailingWS(lhs *stackEntry, rhs []stackEntry) {
	last := len(rhs)-1
	if last < 0 {
		return
	}
	for last >= 0 && rhs[last].sym.offset == rhs[last].sym.endoffset {
		last--
	}
	if last >= 0 {
		lhs.sym.endoffset = rhs[last].sym.endoffset
	} else {
		lhs.sym.endoffset = lhs.sym.offset
	}
}

{{ end -}}

{{- define "reportRange" -}}
{{ if and .Options.FixWhitespace (.Options.IsEnabled "reportRange") .Parser.HasActionsWithReport -}}
func (p *Parser) reportRange(t {{template "nodeTypeRef" .}}, {{if .Parser.UsedFlags}}flags {{template "nodeFlagsRef" .}}, {{end}}rhs []stackEntry) {
	for len(rhs) > 1 && rhs[len(rhs)-1].sym.offset == rhs[len(rhs)-1].sym.endoffset {
		rhs = rhs[:len(rhs)-1]
	}
	p.listener(t, {{if .Parser.UsedFlags}}flags, {{end}}rhs[0].sym.offset, rhs[len(rhs)-1].sym.endoffset)
}

{{ end -}}
{{ end -}}

{{- define "reportIgnoredToken" -}}
func (p *Parser) reportIgnoredToken({{if $.Options.Cancellable}}ctx "context".Context, {{end}}tok symbol) {
{{ block "onBeforeIgnore" .}}{{end -}}
	var t {{template "nodeTypeRef" $}}
{{ if .Lexer.UsedFlags -}}
	var flags {{template "nodeFlagsRef" $}}
{{ end -}}
	switch {{template "tokenType" .}}(tok.symbol) {
{{ range .Parser.MappedTokens -}}
{{ $sym := index $.Syms .Token -}}
{{ if or $sym.Space (eq $sym.Name "invalid_token") -}}
	case {{template "tokenPkg" $}}{{$sym.ID}}:
		t = {{template "nodeTypePkg" $}}{{node_id .Name}}
{{ if .Flags -}}
		flags = {{range $index, $flag := .Flags}}{{if ne $index 0}} | {{end}}{{template "nodeFlagsPkg" $}}{{$flag}}{{end}}
{{ end -}}
{{ end -}}
{{ end -}}
	default:
		return
	}
	if debugSyntax {
		"fmt".Printf("ignored: %v as %v\n", {{template "tokenType" .}}(tok.symbol), t)
	}
	p.listener(t, {{if .Parser.UsedFlags}}{{if .Lexer.UsedFlags}}flags{{else}}0{{end}}, {{end}}tok.offset, tok.endoffset)
}
{{ end -}}

{{- define "parserFlush" -}}
{{ if .Options.IsEnabled "streamFlush" -}}
// flush reports all pending tokens up to a given symbol.
func (p *Parser) flush({{if $.Options.Cancellable}}ctx "context".Context, {{end}}sym symbol) {
	if len(p.pending) > 0 && p.listener != nil {
		for i, tok := range p.pending {
			if tok.endoffset > sym.endoffset {
				// Note: this copying should not happen during normal operation, only
				// during error recovery.
				p.pending = append(p.pending[:0], p.pending[i:]...)
				return
			}
			p.reportIgnoredToken({{if $.Options.Cancellable}}ctx, {{end}}tok)
		}
		p.pending = p.pending[:0]
	}
}

{{ end -}}
{{ end -}}

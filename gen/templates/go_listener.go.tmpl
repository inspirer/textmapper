{{- template "header" . -}}
package {{short_pkg .Options.Package}}

{{ block "NodeDecl" . -}}
{{if .Parser.UsesFlags -}}
type NodeType uint16

type NodeFlags uint16

type Listener func(t NodeType, flags NodeFlags, offset, endoffset int)

{{ else -}}
type NodeType int

type Listener func(t NodeType, offset, endoffset int)

{{ end -}}
{{ end -}}
{{ block "NodeEnum" . -}}
const (
	NoType {{template "nodeTypeRef" $}} = iota
{{- range .Parser.Types.RangeTypes }}
	{{.Name}}    {{- if gt (len .Fields) 0}}  // {{.Descriptor}}{{end}}
{{- end}}
{{- range .Options.ExtraTypes }}
	{{.Name}}
{{- end}}
	NodeTypeMax
)

{{ end -}}
{{ block "NodeString" . -}}
var nodeTypeStr = [...]string{
	"NONE",
{{- range .Parser.Types.RangeTypes }}
	"{{.Name}}",
{{- end}}
{{- range .Options.ExtraTypes }}
	"{{.Name}}",
{{- end}}
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return "fmt".Sprintf("node(%d)", t)
}

{{ end -}}
{{ block "NodeCategories" . -}}
{{ range .Parser.Types.Categories -}}
var {{.Name}} = []{{template "nodeTypeRef" $}}{
{{- range .Types }}
	{{template "nodeTypePkg" $}}{{node_id .}},
{{- end}}
}

{{end -}}
{{end -}}
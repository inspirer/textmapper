{{ template "header" . -}}
package selector

{{ block "Selector" . -}}
{{ if .Options.IsEnabled "Selector" -}}
type Selector func(nt {{template "nodeTypeRef" $}}) bool

{{ end -}}
{{ end -}}
var (
	Any = func(t {{template "nodeTypeRef" $}}) bool { return true }
{{- range .Parser.Types.RangeTypes}}
	{{.Name}} = func(t {{template "nodeTypeRef" $}}) bool { return t == {{template "nodeTypePkg" $}}{{node_id .Name}} }
{{- end}}
{{- range .Parser.Types.Categories}}
	{{.Name}} = {{template "nodeOneOf" $}}({{pkg "main"}}{{.Name}}...)
{{- end}}
)

{{ block "OneOf" . -}}
{{ if .Options.IsEnabled "OneOf" -}}
func OneOf(types ...{{template "nodeTypeRef" $}}) {{template "nodeTypeSel" $}} {
	if len(types) == 0 {
		return func({{template "nodeTypeRef" $}}) bool { return false }
	}
	const bits = 32
	max := 1
	for _, t := range types {
		if int(t) > max {
			max = int(t)
		}
	}
	size := (max + bits) / bits
	bitarr := make([]uint32, size)
	for _, t := range types {
		bitarr[uint(t)/bits] |= 1 << (uint(t) % bits)
	}
	return func(t {{template "nodeTypeRef" $}}) bool {
		i := uint(t)/bits
		return int(i) < len(bitarr) && bitarr[i]&(1<<(uint(t)%bits)) != 0
	}
}
{{ end -}}
{{ end -}}
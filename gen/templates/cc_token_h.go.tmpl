{{ template "header" . -}}
#ifndef {{.Options.IncludeGuardPrefix}}TOKEN_H_
#define {{.Options.IncludeGuardPrefix}}TOKEN_H_

{{block "tokenHeaderIncludes" . -}}
#include <array>
#include <cstdint>
#include <ostream>

#include "{{.Options.AbslIncludePrefix}}/strings/string_view.h"
{{end}}
namespace {{.Options.Namespace}} {

// Token is an enum of all terminal symbols of the {{.Name}} language.
enum class Token {
  UNAVAILABLE = -1,
{{- range $i, $tok := .Tokens}}
  {{.ID}} = {{$i}},{{if .Comment}}  /* {{.Comment}} */{{end}}
{{- end}}
  NumTokens = {{len .Tokens}}
};

constexpr inline std::array<absl::string_view,
                            static_cast<size_t>(Token::NumTokens)>
    tokenStr = {
{{- range .Tokens}}
  {{str_literal .ID}},{{if .Comment}}  /* {{.Comment}} */{{end}}
{{- end}}
};

constexpr inline std::array<absl::string_view,
                            static_cast<size_t>(Token::NumTokens)>
    tokenName = {
{{- range .Tokens}}
  {{stringify .Name}},{{if .Comment}}  /* {{.Comment}} */{{end}}
{{- end}}
};

inline std::ostream& operator<<(std::ostream& os, Token tok) {
  int t = static_cast<int>(tok);
  if (t >= 0 && t < tokenStr.size()) {
    return os << tokenStr[t];
  }
  return os << "token(" << t << ")";
}

}  // namespace {{.Options.Namespace}}

#endif  // {{.Options.IncludeGuardPrefix}}TOKEN_H_

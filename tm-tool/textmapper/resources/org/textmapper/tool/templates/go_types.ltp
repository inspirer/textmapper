${template main-}
${if self->go_parser.eventBased() && opts.eventFields-}
${file self->astFilename()-}
${call unit-}
${end-}
${file self->factoryFilename()-}
${call factory-}
${end-}
${end-}
${end}

${template unit-}
${call go.header-}
package ${self->package()}

${if self->localWrappedType()-}
${call wrappedTypeTempl-}
${end-}
${call interfaces-}
${call types-}
${end}

${template factory-}
${call go.header-}
package ${self->package()}

func To${self->baseNode()}(n ${self->wrappedTypeRef()}) ${self->baseNode()} {
	if n == nil {
		return nil
	}
	switch n.Type() {
${foreach rangeType in syntax.rangeTypes.sort(it|it)-}
	case ${rangeType->go_listener.nodeTypeValueRef()}:
		return &${rangeType->astClassRef()}{n}
${end-}
${if tokens = opts.reportTokens
                   .collect(it|it->go_token.tokenNodeName()->go_listener.nodeTypeValueRef())->util.join(', '),
     tokens != '' -}
	case ${tokens}:
		return &Token{n}
${end-}
${call customRules-}
	}
	panic("fmt".Errorf("ast: unknown node type %v", n.Type()))
	return nil
}
${end}


${template wrappedTypeTempl-}
type ${self->wrappedTypeRef()->go.declarationName()} interface {
	Type() ${self->go_listener.nodeTypeRef()}
	Offset() int
	Endoffset() int
	// Child returns the first child node that matches the selector.
	Child(sel ${self->go_filter.nodeSelectorTypeRef()}) Node
	Children(sel ${self->go_filter.nodeSelectorTypeRef()}) []Node
	// Next returns the first element among the following siblings that matches the selector.
	Next(sel ${self->go_filter.nodeSelectorTypeRef()}) Node
	// NextAll returns all following siblings of the node that match the selector.
	NextAll(sel ${self->go_filter.nodeSelectorTypeRef()}) []Node
	Text() string
}

${end}

${template interfaces-}
// Interfaces.

type ${self->baseNode()} interface {
  ${self->wrappedTypeRef()}
	${self->baseNode()->asInterfaceMethod()}()
}

${if opts.reportTokens.length > 0-}
type Token struct {
	${self->wrappedTypeRef()}
}

${end-}
// All types implement ${self->baseNode()}.
${foreach rangeType in syntax.rangeTypes.sort(it|it)-}
func (${rangeType->astClassRef()->go.declarationName()}) ${self->baseNode()->asInterfaceMethod()}() {}
${end-}
${if opts.reportTokens.length > 0-}
func (Token) ${self->baseNode()->asInterfaceMethod()}() {}
${end-}

${foreach cat in syntax.categories.sort(it|it).select(it|it != 'TokenSet')-}
type ${cat->astInterfaceRef()->go.declarationName()} interface {
  ${self->baseNode()}
	${cat->asInterfaceMethod()}()
}

// ${cat->asInterfaceMethod()}() ensures that only the following types can be
// assigned to ${cat->astInterfaceRef()->go.declarationName()}.
//
${foreach type in syntax.categoryTypes(cat)-}
func (${type->astClassRef()->go.declarationName()}) ${cat->asInterfaceMethod()}() {}
${end-}

${end-}
${end}

${template types-}
// Types.

${foreach rangeType in syntax.rangeTypes.sort(it|it)-}
${call type(rangeType)-}
${end-}

${end}

${template type(rangeType)-}
type ${rangeType->astClassRef()->go.declarationName()} struct {
	${self->wrappedTypeRef()}
}
${foreach field in syntax.rangeFields(rangeType)}
func (n ${rangeType->astClassRef()->go.declarationName()}) ${field->asGetterName()}() ${call getterType(field)} {
${call getterImpl(field)-}
}
${end}
${end}


${cached query needPtr(field) =
  field.interfaceType ? false :
  field.isNullable() && !field.isList() && field.types.length == 1 }

${cached query getterType(field) =
  (field.isList() ? '[]' : '') +
  (self->needPtr(field) ? '*' : '') +
   self->getterInnerType(field) }



${cached query isTokenType(name) =
    syntax.categoryTypes('TokenSet').contains(name) }

${cached query getterInnerType(field) =
  field.interfaceType ? field.interfaceType->astClassRef() :
  field.types.forAll(t|self->isTokenType(t)) ? 'Token' :
  field.types.length == 1
     ? field.types.first()->astClassRef()
     : self->baseNode() }

${cached query isOneType(field) = field.types.length == 1 }

${query fieldFilter(field) =
  field.interfaceType ? field.interfaceType->go_filter.nodeTypeFilterRef() :
  field.types.length == 1 ? field.types.first()->go_filter.nodeTypeFilterRef() :
  self->go_filter.oneOfRef() + '(' +
          field.types.collect(it|it->go_listener.nodeTypeValueRef())->util.join(', ') + ')'}

${query getFieldNode(field) =
  after = field.comesAfterField(),
  method = after ? (field.isList() ? 'NextAll' : 'Next') : (field.isList() ? 'Children' : 'Child'),
  (after ? self->getFieldNode(after) + '.' : 'n.') + method + '(' + self->fieldFilter(field) + ')' }

${template convertNode(field, node)-}
${if self->isOneType(field)-}
${(self->needPtr(field) ? '&' : '') + self->getterInnerType(field)}{${node}}${else-}
To${self->baseNode()}(${node}).(${(self->needPtr(field) ? '*' : '') + self->getterInnerType(field)})${end-}
${end}

${template getterImpl(field)-}
${if field.isList()-}
	nodes := ${self->getFieldNode(field)}
	var result []${self->getterInnerType(field)} = make([]${self->getterInnerType(field)}, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ${self->convertNode(field, 'node')})
	}
	return result
${else if !field.isNullable()-}
	return ${self->convertNode(field, self->getFieldNode(field))}
${else-}
	if child := ${self->getFieldNode(field)}; child != nil {
		return ${self->convertNode(field, 'child')}
	}
	return nil
${end-}
${end}


${query astFilename() = 'ast/ast.go'}
${query factoryFilename() = 'ast/factory.go'}
${query package() = self->go.package() + '/ast'}

${query localWrappedType() = self->package()->go.element(self->wrappedTypeRef()->go.declarationName()) == self->wrappedTypeRef()}
${query wrappedTypeRef() = self->package()->go.element('Node')}
${query baseNode() = util.toCamelCase(opts.lang, true) + 'Node'}

${query asInterfaceMethod() = util.toFirstLower(self->go_listener.asRangeTypeName()) + 'Node' }

${query asGetterName() = util.toCamelCase(self.name, true)->go.escapeGoReserved()}

${query astClassRef() = self->package()->go.element(self->go_listener.asRangeTypeName())}
${query astInterfaceRef() = self->package()->go.element(self->go_listener.asRangeTypeName())}

${template customRules}${end}

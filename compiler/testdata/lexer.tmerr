language lexer(go);

:: lexer

%s initial;
# err: redeclaration of 'initial'
%x «initial»;

idChar = /[a-zA-Z_]/
# err: redeclaration of 'idChar'
«idChar» = /[a-zA-Z_0-9]/

# err: unused pattern 'unusedP'
«unusedP» = /useless/

id:      /{idChar}+/
scon:    /"([^\n\\"]|\\.)*"/
# err: terminal type redeclaration for id, was <no type>
id «{fff}»:      /'[a-z]+'/

whitespace: /[\n\r\t ]+/   (space)

# err: syntax error
«%brackets '(' ')';»

'(': /\(/
')': /\)/

# err: broken regexp: invalid escape sequence
broken_regex: /asd«\0a»bc/
# err: broken regexp: unexpected closing parenthesis
broken_regex: /asd«)»/
# err: broken regexp: missing closing parenthesis
broken_regex: «/(asd/»

<*> {
   «%s foo;»
# err: syntax error
}

# err: unresolved reference initia
<«initia»> q: /qqq/

%x off1;

<initial, off1> a1: /%[a-z]+/ (class)
# err: a2 must be applicable in the same set of start conditions as a1
«<off1> a2: /%abc/»
# OK
<*> a3: /%def/
# OK: order does not matter
<off1, initial> a4: /%xyz/

# err: two rules are identical: conflict_with_id and id
«conflict_with_id: /ppp/»
<off1> no_id_conflict: /ppp/

# err: two rules are identical: ppp and no_id_conflict
«<off1> ppp: /ppp/»

# err: class rule without specializations 'noSpecializations'
«noSpecializations: /567/ (class)»

rrr-ppp: /\$rrrppp/
# err: rrr--ppp and rrr-ppp get the same ID in generated code
«rrr--ppp»: /\$rrrppp2/